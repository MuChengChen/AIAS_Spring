circuit top :
  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip Inst : UInt<32>, flip BrEq : UInt<1>, flip BrLT : UInt<1>, PCSel : UInt<1>, ImmSel : UInt<3>, RegWEn : UInt<1>, BrUn : UInt<1>, BSel : UInt<1>, ASel : UInt<1>, ALUSel : UInt<4>, MemRW : UInt<1>, WBSel : UInt<2>, Lui : UInt<1>, Hcf : UInt<1>, vector_ALUSel : UInt<4>, vector_ASel : UInt<1>, vector_BSel : UInt<1>, vector_WBSel : UInt<2>, vector_RegWEn : UInt<1>}

    wire opcode : UInt<7> @[Controller.scala 86:22]
    node _T = bits(io.Inst, 6, 0) @[Controller.scala 87:22]
    opcode <= _T @[Controller.scala 87:12]
    wire funct3 : UInt<3> @[Controller.scala 89:22]
    node _T_1 = bits(io.Inst, 14, 12) @[Controller.scala 90:22]
    funct3 <= _T_1 @[Controller.scala 90:12]
    wire funct7 : UInt<7> @[Controller.scala 92:22]
    node _T_2 = bits(io.Inst, 31, 25) @[Controller.scala 93:22]
    funct7 <= _T_2 @[Controller.scala 93:12]
    wire funct6 : UInt<6> @[Controller.scala 96:22]
    node _T_3 = bits(io.Inst, 31, 26) @[Controller.scala 97:22]
    funct6 <= _T_3 @[Controller.scala 97:12]
    io.RegWEn <= UInt<1>("h0") @[Controller.scala 100:15]
    io.ASel <= UInt<1>("h0") @[Controller.scala 101:13]
    io.BSel <= UInt<1>("h0") @[Controller.scala 102:13]
    io.BrUn <= UInt<1>("h0") @[Controller.scala 103:13]
    io.MemRW <= UInt<1>("h0") @[Controller.scala 104:14]
    io.ImmSel <= UInt<1>("h0") @[Controller.scala 105:15]
    io.ALUSel <= UInt<1>("h0") @[Controller.scala 106:15]
    io.PCSel <= UInt<1>("h0") @[Controller.scala 107:14]
    io.WBSel <= UInt<2>("h0") @[Controller.scala 108:14]
    io.Lui <= UInt<1>("h0") @[Controller.scala 109:12]
    node _T_4 = eq(opcode, UInt<4>("hb")) @[Controller.scala 110:22]
    io.Hcf <= _T_4 @[Controller.scala 110:12]
    io.vector_ALUSel <= UInt<1>("h0") @[Controller.scala 119:22]
    io.vector_ASel <= UInt<1>("h0") @[Controller.scala 120:22]
    io.vector_BSel <= UInt<1>("h0") @[Controller.scala 121:22]
    io.vector_RegWEn <= UInt<1>("h1") @[Controller.scala 122:22]
    io.vector_WBSel <= UInt<2>("h0") @[Controller.scala 123:22]

  module PC :
    input clock : Clock
    input reset : Reset
    output io : { flip Hcf : UInt<1>, flip PCSel : UInt<1>, flip alu_out : UInt<32>, pc : UInt<15>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[PC.scala 14:24]
    node _T = eq(io.Hcf, UInt<1>("h0")) @[PC.scala 16:10]
    when _T : @[PC.scala 16:18]
      node _T_1 = not(UInt<32>("h3")) @[PC.scala 17:45]
      node _T_2 = and(io.alu_out, _T_1) @[PC.scala 17:43]
      node _T_3 = add(pcReg, UInt<3>("h4")) @[PC.scala 17:67]
      node _T_4 = tail(_T_3, 1) @[PC.scala 17:67]
      node _T_5 = mux(io.PCSel, _T_2, _T_4) @[PC.scala 17:21]
      pcReg <= _T_5 @[PC.scala 17:15]
    else :
      pcReg <= pcReg @[PC.scala 19:15]
    io.pc <= pcReg @[PC.scala 23:11]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst_31_7 : UInt<25>, flip ImmSel : UInt<3>, imm : UInt<32>}

    wire inst_shift : UInt<32> @[ImmGen.scala 24:26]
    node _T = cat(io.inst_31_7, UInt<7>("h0")) @[Cat.scala 30:58]
    inst_shift <= _T @[ImmGen.scala 25:16]
    wire simm : SInt<32> @[ImmGen.scala 27:20]
    node _T_1 = bits(inst_shift, 31, 20) @[ImmGen.scala 34:24]
    node _T_2 = asSInt(_T_1) @[ImmGen.scala 34:32]
    node _T_3 = bits(inst_shift, 31, 31) @[ImmGen.scala 37:28]
    node _T_4 = bits(inst_shift, 7, 7) @[ImmGen.scala 38:28]
    node _T_5 = bits(inst_shift, 30, 25) @[ImmGen.scala 39:28]
    node _T_6 = bits(inst_shift, 11, 8) @[ImmGen.scala 40:28]
    node lo = cat(_T_6, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi = cat(_T_3, _T_4) @[Cat.scala 30:58]
    node hi = cat(hi_hi, _T_5) @[Cat.scala 30:58]
    node _T_7 = cat(hi, lo) @[Cat.scala 30:58]
    node _T_8 = asSInt(_T_7) @[ImmGen.scala 41:28]
    node _T_9 = bits(inst_shift, 31, 31) @[ImmGen.scala 44:28]
    node _T_10 = bits(inst_shift, 30, 25) @[ImmGen.scala 45:27]
    node _T_11 = bits(inst_shift, 11, 8) @[ImmGen.scala 46:27]
    node _T_12 = bits(inst_shift, 7, 7) @[ImmGen.scala 47:27]
    node lo_1 = cat(_T_11, _T_12) @[Cat.scala 30:58]
    node hi_1 = cat(_T_9, _T_10) @[Cat.scala 30:58]
    node _T_13 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_14 = asSInt(_T_13) @[ImmGen.scala 47:32]
    node _T_15 = bits(inst_shift, 31, 12) @[ImmGen.scala 50:28]
    node _T_16 = cat(_T_15, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_17 = asSInt(_T_16) @[ImmGen.scala 50:47]
    node _T_18 = bits(inst_shift, 31, 31) @[ImmGen.scala 53:28]
    node _T_19 = bits(inst_shift, 19, 12) @[ImmGen.scala 54:28]
    node _T_20 = bits(inst_shift, 20, 20) @[ImmGen.scala 55:28]
    node _T_21 = bits(inst_shift, 30, 21) @[ImmGen.scala 56:28]
    node lo_2 = cat(_T_21, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_18, _T_19) @[Cat.scala 30:58]
    node hi_2 = cat(hi_hi_1, _T_20) @[Cat.scala 30:58]
    node _T_22 = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_23 = asSInt(_T_22) @[ImmGen.scala 57:28]
    node _T_24 = eq(UInt<1>("h0"), io.ImmSel) @[Mux.scala 80:60]
    node _T_25 = mux(_T_24, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[Mux.scala 80:57]
    node _T_26 = eq(UInt<1>("h1"), io.ImmSel) @[Mux.scala 80:60]
    node _T_27 = mux(_T_26, _T_2, _T_25) @[Mux.scala 80:57]
    node _T_28 = eq(UInt<2>("h3"), io.ImmSel) @[Mux.scala 80:60]
    node _T_29 = mux(_T_28, _T_8, _T_27) @[Mux.scala 80:57]
    node _T_30 = eq(UInt<2>("h2"), io.ImmSel) @[Mux.scala 80:60]
    node _T_31 = mux(_T_30, _T_14, _T_29) @[Mux.scala 80:57]
    node _T_32 = eq(UInt<3>("h5"), io.ImmSel) @[Mux.scala 80:60]
    node _T_33 = mux(_T_32, _T_17, _T_31) @[Mux.scala 80:57]
    node _T_34 = eq(UInt<3>("h4"), io.ImmSel) @[Mux.scala 80:60]
    node _T_35 = mux(_T_34, _T_23, _T_33) @[Mux.scala 80:57]
    simm <= _T_35 @[ImmGen.scala 29:10]
    node _T_36 = asUInt(simm) @[ImmGen.scala 61:20]
    io.imm <= _T_36 @[ImmGen.scala 61:12]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>, flip raddr : UInt<5>[2], rdata : UInt<32>[2], regs : UInt<32>[32]}

    wire _WIRE : UInt<32>[32] @[RegFile.scala 16:29]
    _WIRE[0] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[1] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[2] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[3] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[4] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[5] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[6] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[7] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[8] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[9] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[10] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[11] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[12] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[13] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[14] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[15] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[16] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[17] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[18] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[19] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[20] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[21] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[22] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[23] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[24] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[25] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[26] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[27] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[28] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[29] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[30] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[31] <= UInt<32>("h0") @[RegFile.scala 16:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _WIRE) @[RegFile.scala 16:21]
    io.rdata[0] <= regs[io.raddr[0]] @[RegFile.scala 22:52]
    io.rdata[1] <= regs[io.raddr[1]] @[RegFile.scala 22:52]
    when io.wen : @[RegFile.scala 23:16]
      regs[io.waddr] <= io.wdata @[RegFile.scala 23:32]
    regs[0] <= UInt<1>("h0") @[RegFile.scala 24:11]
    io.regs[0] <= regs[0] @[RegFile.scala 26:11]
    io.regs[1] <= regs[1] @[RegFile.scala 26:11]
    io.regs[2] <= regs[2] @[RegFile.scala 26:11]
    io.regs[3] <= regs[3] @[RegFile.scala 26:11]
    io.regs[4] <= regs[4] @[RegFile.scala 26:11]
    io.regs[5] <= regs[5] @[RegFile.scala 26:11]
    io.regs[6] <= regs[6] @[RegFile.scala 26:11]
    io.regs[7] <= regs[7] @[RegFile.scala 26:11]
    io.regs[8] <= regs[8] @[RegFile.scala 26:11]
    io.regs[9] <= regs[9] @[RegFile.scala 26:11]
    io.regs[10] <= regs[10] @[RegFile.scala 26:11]
    io.regs[11] <= regs[11] @[RegFile.scala 26:11]
    io.regs[12] <= regs[12] @[RegFile.scala 26:11]
    io.regs[13] <= regs[13] @[RegFile.scala 26:11]
    io.regs[14] <= regs[14] @[RegFile.scala 26:11]
    io.regs[15] <= regs[15] @[RegFile.scala 26:11]
    io.regs[16] <= regs[16] @[RegFile.scala 26:11]
    io.regs[17] <= regs[17] @[RegFile.scala 26:11]
    io.regs[18] <= regs[18] @[RegFile.scala 26:11]
    io.regs[19] <= regs[19] @[RegFile.scala 26:11]
    io.regs[20] <= regs[20] @[RegFile.scala 26:11]
    io.regs[21] <= regs[21] @[RegFile.scala 26:11]
    io.regs[22] <= regs[22] @[RegFile.scala 26:11]
    io.regs[23] <= regs[23] @[RegFile.scala 26:11]
    io.regs[24] <= regs[24] @[RegFile.scala 26:11]
    io.regs[25] <= regs[25] @[RegFile.scala 26:11]
    io.regs[26] <= regs[26] @[RegFile.scala 26:11]
    io.regs[27] <= regs[27] @[RegFile.scala 26:11]
    io.regs[28] <= regs[28] @[RegFile.scala 26:11]
    io.regs[29] <= regs[29] @[RegFile.scala 26:11]
    io.regs[30] <= regs[30] @[RegFile.scala 26:11]
    io.regs[31] <= regs[31] @[RegFile.scala 26:11]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<32>, flip src2 : UInt<32>, flip ALUSel : UInt<4>, out : UInt<32>}

    io.out <= UInt<1>("h0") @[ALU.scala 20:10]
    node _T = eq(UInt<1>("h0"), io.ALUSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.src1, io.src2) @[ALU.scala 22:31]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 22:31]
      io.out <= _T_2 @[ALU.scala 22:21]
    else :
      node _T_3 = eq(UInt<1>("h1"), io.ALUSel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = bits(io.src2, 4, 0) @[ALU.scala 23:42]
        node _T_5 = dshl(io.src1, _T_4) @[ALU.scala 23:32]
        io.out <= _T_5 @[ALU.scala 23:21]
      else :
        node _T_6 = eq(UInt<2>("h2"), io.ALUSel) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _T_7 = asSInt(io.src1) @[ALU.scala 24:36]
          node _T_8 = asSInt(io.src2) @[ALU.scala 24:51]
          node _T_9 = lt(_T_7, _T_8) @[ALU.scala 24:42]
          node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 24:27]
          io.out <= _T_10 @[ALU.scala 24:21]
        else :
          node _T_11 = eq(UInt<2>("h3"), io.ALUSel) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            node _T_12 = lt(io.src1, io.src2) @[ALU.scala 25:35]
            node _T_13 = mux(_T_12, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 25:27]
            io.out <= _T_13 @[ALU.scala 25:21]
          else :
            node _T_14 = eq(UInt<3>("h4"), io.ALUSel) @[Conditional.scala 37:30]
            when _T_14 : @[Conditional.scala 39:67]
              node _T_15 = xor(io.src1, io.src2) @[ALU.scala 26:31]
              io.out <= _T_15 @[ALU.scala 26:21]
            else :
              node _T_16 = eq(UInt<3>("h5"), io.ALUSel) @[Conditional.scala 37:30]
              when _T_16 : @[Conditional.scala 39:67]
                node _T_17 = bits(io.src2, 4, 0) @[ALU.scala 27:42]
                node _T_18 = dshr(io.src1, _T_17) @[ALU.scala 27:32]
                io.out <= _T_18 @[ALU.scala 27:21]
              else :
                node _T_19 = eq(UInt<3>("h6"), io.ALUSel) @[Conditional.scala 37:30]
                when _T_19 : @[Conditional.scala 39:67]
                  node _T_20 = or(io.src1, io.src2) @[ALU.scala 28:31]
                  io.out <= _T_20 @[ALU.scala 28:21]
                else :
                  node _T_21 = eq(UInt<3>("h7"), io.ALUSel) @[Conditional.scala 37:30]
                  when _T_21 : @[Conditional.scala 39:67]
                    node _T_22 = and(io.src1, io.src2) @[ALU.scala 29:31]
                    io.out <= _T_22 @[ALU.scala 29:21]
                  else :
                    node _T_23 = eq(UInt<4>("h8"), io.ALUSel) @[Conditional.scala 37:30]
                    when _T_23 : @[Conditional.scala 39:67]
                      node _T_24 = sub(io.src1, io.src2) @[ALU.scala 30:31]
                      node _T_25 = tail(_T_24, 1) @[ALU.scala 30:31]
                      io.out <= _T_25 @[ALU.scala 30:21]
                    else :
                      node _T_26 = eq(UInt<4>("hd"), io.ALUSel) @[Conditional.scala 37:30]
                      when _T_26 : @[Conditional.scala 39:67]
                        node _T_27 = asSInt(io.src1) @[ALU.scala 31:33]
                        node _T_28 = bits(io.src2, 4, 0) @[ALU.scala 31:50]
                        node _T_29 = dshr(_T_27, _T_28) @[ALU.scala 31:40]
                        node _T_30 = asUInt(_T_29) @[ALU.scala 31:57]
                        io.out <= _T_30 @[ALU.scala 31:21]

  module BranchComp :
    input clock : Clock
    input reset : Reset
    output io : { flip BrUn : UInt<1>, flip src1 : UInt<32>, flip src2 : UInt<32>, BrEq : UInt<1>, BrLT : UInt<1>}

    wire eq : UInt<1>
    eq <= UInt<1>("h0")
    wire lt : UInt<1>
    lt <= UInt<1>("h0")
    when io.BrUn : @[BranchComp.scala 19:18]
      node _T = lt(io.src1, io.src2) @[BranchComp.scala 20:20]
      when _T : @[BranchComp.scala 20:31]
        lt <= UInt<1>("h1") @[BranchComp.scala 20:36]
    else :
      node _T_1 = asSInt(io.src1) @[BranchComp.scala 22:20]
      node _T_2 = asSInt(io.src2) @[BranchComp.scala 22:37]
      node _T_3 = lt(_T_1, _T_2) @[BranchComp.scala 22:27]
      when _T_3 : @[BranchComp.scala 22:45]
        lt <= UInt<1>("h1") @[BranchComp.scala 22:50]
    node _T_4 = eq(io.src1, io.src2) @[BranchComp.scala 25:22]
    node _T_5 = mux(_T_4, UInt<1>("h1"), UInt<1>("h0")) @[BranchComp.scala 25:14]
    eq <= _T_5 @[BranchComp.scala 25:8]
    io.BrEq <= eq @[BranchComp.scala 27:13]
    io.BrLT <= lt @[BranchComp.scala 28:13]

  module Vector_RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip vector_wen : UInt<1>, flip vector_waddr : UInt<5>, flip vector_wdata : UInt<64>, flip vector_raddr : UInt<5>[2], vector_rdata : UInt<64>[2], vector_regs : UInt<64>[32]}

    wire _WIRE : UInt<64>[32] @[Vector_RegFile.scala 24:36]
    _WIRE[0] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[1] <= UInt<64>("h1020304050607") @[Vector_RegFile.scala 24:36]
    _WIRE[2] <= UInt<64>("h1020304050607") @[Vector_RegFile.scala 24:36]
    _WIRE[3] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[4] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[5] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[6] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[7] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[8] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[9] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[10] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[11] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[12] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[13] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[14] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[15] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[16] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[17] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[18] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[19] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[20] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[21] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[22] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[23] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[24] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[25] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[26] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[27] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[28] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[29] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[30] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[31] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    reg vector_regs : UInt<64>[32], clock with :
      reset => (reset, _WIRE) @[Vector_RegFile.scala 24:28]
    io.vector_rdata[0] <= vector_regs[io.vector_raddr[0]] @[Vector_RegFile.scala 28:67]
    io.vector_rdata[1] <= vector_regs[io.vector_raddr[1]] @[Vector_RegFile.scala 28:67]
    when io.vector_wen : @[Vector_RegFile.scala 31:23]
      vector_regs[io.vector_waddr] <= io.vector_wdata @[Vector_RegFile.scala 31:53]
    vector_regs[0] <= UInt<64>("h0") @[Vector_RegFile.scala 33:18]
    io.vector_regs[0] <= vector_regs[0] @[Vector_RegFile.scala 35:18]
    io.vector_regs[1] <= vector_regs[1] @[Vector_RegFile.scala 35:18]
    io.vector_regs[2] <= vector_regs[2] @[Vector_RegFile.scala 35:18]
    io.vector_regs[3] <= vector_regs[3] @[Vector_RegFile.scala 35:18]
    io.vector_regs[4] <= vector_regs[4] @[Vector_RegFile.scala 35:18]
    io.vector_regs[5] <= vector_regs[5] @[Vector_RegFile.scala 35:18]
    io.vector_regs[6] <= vector_regs[6] @[Vector_RegFile.scala 35:18]
    io.vector_regs[7] <= vector_regs[7] @[Vector_RegFile.scala 35:18]
    io.vector_regs[8] <= vector_regs[8] @[Vector_RegFile.scala 35:18]
    io.vector_regs[9] <= vector_regs[9] @[Vector_RegFile.scala 35:18]
    io.vector_regs[10] <= vector_regs[10] @[Vector_RegFile.scala 35:18]
    io.vector_regs[11] <= vector_regs[11] @[Vector_RegFile.scala 35:18]
    io.vector_regs[12] <= vector_regs[12] @[Vector_RegFile.scala 35:18]
    io.vector_regs[13] <= vector_regs[13] @[Vector_RegFile.scala 35:18]
    io.vector_regs[14] <= vector_regs[14] @[Vector_RegFile.scala 35:18]
    io.vector_regs[15] <= vector_regs[15] @[Vector_RegFile.scala 35:18]
    io.vector_regs[16] <= vector_regs[16] @[Vector_RegFile.scala 35:18]
    io.vector_regs[17] <= vector_regs[17] @[Vector_RegFile.scala 35:18]
    io.vector_regs[18] <= vector_regs[18] @[Vector_RegFile.scala 35:18]
    io.vector_regs[19] <= vector_regs[19] @[Vector_RegFile.scala 35:18]
    io.vector_regs[20] <= vector_regs[20] @[Vector_RegFile.scala 35:18]
    io.vector_regs[21] <= vector_regs[21] @[Vector_RegFile.scala 35:18]
    io.vector_regs[22] <= vector_regs[22] @[Vector_RegFile.scala 35:18]
    io.vector_regs[23] <= vector_regs[23] @[Vector_RegFile.scala 35:18]
    io.vector_regs[24] <= vector_regs[24] @[Vector_RegFile.scala 35:18]
    io.vector_regs[25] <= vector_regs[25] @[Vector_RegFile.scala 35:18]
    io.vector_regs[26] <= vector_regs[26] @[Vector_RegFile.scala 35:18]
    io.vector_regs[27] <= vector_regs[27] @[Vector_RegFile.scala 35:18]
    io.vector_regs[28] <= vector_regs[28] @[Vector_RegFile.scala 35:18]
    io.vector_regs[29] <= vector_regs[29] @[Vector_RegFile.scala 35:18]
    io.vector_regs[30] <= vector_regs[30] @[Vector_RegFile.scala 35:18]
    io.vector_regs[31] <= vector_regs[31] @[Vector_RegFile.scala 35:18]

  module Vector_ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip vector_src1 : UInt<64>, flip vector_src2 : UInt<64>, flip vector_ALUSel : UInt<4>, vector_out : UInt<64>}

    wire wire_set : UInt<8>[8] @[Vector_ALU.scala 25:22]
    wire_set[0] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[1] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[2] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[3] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[4] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[5] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[6] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    wire_set[7] <= UInt<1>("h0") @[Vector_ALU.scala 29:10]
    node _T = eq(UInt<1>("h0"), io.vector_ALUSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      wire _WIRE : UInt<8>[8] @[Vector_ALU.scala 48:46]
      wire _WIRE_1 : UInt<64>
      _WIRE_1 <= io.vector_src1
      node _T_1 = bits(_WIRE_1, 7, 0) @[Vector_ALU.scala 48:46]
      _WIRE[0] <= _T_1 @[Vector_ALU.scala 48:46]
      node _T_2 = bits(_WIRE_1, 15, 8) @[Vector_ALU.scala 48:46]
      _WIRE[1] <= _T_2 @[Vector_ALU.scala 48:46]
      node _T_3 = bits(_WIRE_1, 23, 16) @[Vector_ALU.scala 48:46]
      _WIRE[2] <= _T_3 @[Vector_ALU.scala 48:46]
      node _T_4 = bits(_WIRE_1, 31, 24) @[Vector_ALU.scala 48:46]
      _WIRE[3] <= _T_4 @[Vector_ALU.scala 48:46]
      node _T_5 = bits(_WIRE_1, 39, 32) @[Vector_ALU.scala 48:46]
      _WIRE[4] <= _T_5 @[Vector_ALU.scala 48:46]
      node _T_6 = bits(_WIRE_1, 47, 40) @[Vector_ALU.scala 48:46]
      _WIRE[5] <= _T_6 @[Vector_ALU.scala 48:46]
      node _T_7 = bits(_WIRE_1, 55, 48) @[Vector_ALU.scala 48:46]
      _WIRE[6] <= _T_7 @[Vector_ALU.scala 48:46]
      node _T_8 = bits(_WIRE_1, 63, 56) @[Vector_ALU.scala 48:46]
      _WIRE[7] <= _T_8 @[Vector_ALU.scala 48:46]
      wire _WIRE_2 : UInt<8>[8] @[Vector_ALU.scala 49:46]
      wire _WIRE_3 : UInt<64>
      _WIRE_3 <= io.vector_src2
      node _T_9 = bits(_WIRE_3, 7, 0) @[Vector_ALU.scala 49:46]
      _WIRE_2[0] <= _T_9 @[Vector_ALU.scala 49:46]
      node _T_10 = bits(_WIRE_3, 15, 8) @[Vector_ALU.scala 49:46]
      _WIRE_2[1] <= _T_10 @[Vector_ALU.scala 49:46]
      node _T_11 = bits(_WIRE_3, 23, 16) @[Vector_ALU.scala 49:46]
      _WIRE_2[2] <= _T_11 @[Vector_ALU.scala 49:46]
      node _T_12 = bits(_WIRE_3, 31, 24) @[Vector_ALU.scala 49:46]
      _WIRE_2[3] <= _T_12 @[Vector_ALU.scala 49:46]
      node _T_13 = bits(_WIRE_3, 39, 32) @[Vector_ALU.scala 49:46]
      _WIRE_2[4] <= _T_13 @[Vector_ALU.scala 49:46]
      node _T_14 = bits(_WIRE_3, 47, 40) @[Vector_ALU.scala 49:46]
      _WIRE_2[5] <= _T_14 @[Vector_ALU.scala 49:46]
      node _T_15 = bits(_WIRE_3, 55, 48) @[Vector_ALU.scala 49:46]
      _WIRE_2[6] <= _T_15 @[Vector_ALU.scala 49:46]
      node _T_16 = bits(_WIRE_3, 63, 56) @[Vector_ALU.scala 49:46]
      _WIRE_2[7] <= _T_16 @[Vector_ALU.scala 49:46]
      node _T_17 = add(_WIRE[0], _WIRE_2[0]) @[Vector_ALU.scala 53:24]
      node _T_18 = tail(_T_17, 1) @[Vector_ALU.scala 53:24]
      wire_set[0] <= _T_18 @[Vector_ALU.scala 53:16]
      node _T_19 = add(_WIRE[1], _WIRE_2[1]) @[Vector_ALU.scala 53:24]
      node _T_20 = tail(_T_19, 1) @[Vector_ALU.scala 53:24]
      wire_set[1] <= _T_20 @[Vector_ALU.scala 53:16]
      node _T_21 = add(_WIRE[2], _WIRE_2[2]) @[Vector_ALU.scala 53:24]
      node _T_22 = tail(_T_21, 1) @[Vector_ALU.scala 53:24]
      wire_set[2] <= _T_22 @[Vector_ALU.scala 53:16]
      node _T_23 = add(_WIRE[3], _WIRE_2[3]) @[Vector_ALU.scala 53:24]
      node _T_24 = tail(_T_23, 1) @[Vector_ALU.scala 53:24]
      wire_set[3] <= _T_24 @[Vector_ALU.scala 53:16]
      node _T_25 = add(_WIRE[4], _WIRE_2[4]) @[Vector_ALU.scala 53:24]
      node _T_26 = tail(_T_25, 1) @[Vector_ALU.scala 53:24]
      wire_set[4] <= _T_26 @[Vector_ALU.scala 53:16]
      node _T_27 = add(_WIRE[5], _WIRE_2[5]) @[Vector_ALU.scala 53:24]
      node _T_28 = tail(_T_27, 1) @[Vector_ALU.scala 53:24]
      wire_set[5] <= _T_28 @[Vector_ALU.scala 53:16]
      node _T_29 = add(_WIRE[6], _WIRE_2[6]) @[Vector_ALU.scala 53:24]
      node _T_30 = tail(_T_29, 1) @[Vector_ALU.scala 53:24]
      wire_set[6] <= _T_30 @[Vector_ALU.scala 53:16]
      node _T_31 = add(_WIRE[7], _WIRE_2[7]) @[Vector_ALU.scala 53:24]
      node _T_32 = tail(_T_31, 1) @[Vector_ALU.scala 53:24]
      wire_set[7] <= _T_32 @[Vector_ALU.scala 53:16]
    node lo_lo = cat(wire_set[1], wire_set[0]) @[Vector_ALU.scala 62:29]
    node lo_hi = cat(wire_set[3], wire_set[2]) @[Vector_ALU.scala 62:29]
    node lo = cat(lo_hi, lo_lo) @[Vector_ALU.scala 62:29]
    node hi_lo = cat(wire_set[5], wire_set[4]) @[Vector_ALU.scala 62:29]
    node hi_hi = cat(wire_set[7], wire_set[6]) @[Vector_ALU.scala 62:29]
    node hi = cat(hi_hi, hi_lo) @[Vector_ALU.scala 62:29]
    node _T_33 = cat(hi, lo) @[Vector_ALU.scala 62:29]
    io.vector_out <= _T_33 @[Vector_ALU.scala 62:17]

  module Single_Cycle :
    input clock : Clock
    input reset : Reset
    output io : { pc : UInt<15>, flip rinst : UInt<32>, raddr : UInt<15>, flip rdata : UInt<32>, wdata : UInt<32>, waddr : UInt<15>, MemRW : UInt<1>, funct3 : UInt<3>, regs : UInt<32>[32], Hcf : UInt<1>, vector_regs : UInt<64>[32]}

    inst ct of Controller @[Single_cycle.scala 34:20]
    ct.clock <= clock
    ct.reset <= reset
    inst pc of PC @[Single_cycle.scala 35:20]
    pc.clock <= clock
    pc.reset <= reset
    inst ig of ImmGen @[Single_cycle.scala 36:20]
    ig.clock <= clock
    ig.reset <= reset
    inst rf of RegFile @[Single_cycle.scala 37:20]
    rf.clock <= clock
    rf.reset <= reset
    inst alu of ALU @[Single_cycle.scala 38:21]
    alu.clock <= clock
    alu.reset <= reset
    inst bc of BranchComp @[Single_cycle.scala 39:20]
    bc.clock <= clock
    bc.reset <= reset
    wire rd : UInt<5> @[Single_cycle.scala 42:25]
    wire rs1 : UInt<5> @[Single_cycle.scala 43:25]
    wire rs2 : UInt<5> @[Single_cycle.scala 44:25]
    wire funct3 : UInt<3> @[Single_cycle.scala 45:25]
    wire inst_31_7 : UInt<25> @[Single_cycle.scala 46:25]
    node _T = bits(io.rinst, 11, 7) @[Single_cycle.scala 48:20]
    rd <= _T @[Single_cycle.scala 48:9]
    node _T_1 = bits(io.rinst, 19, 15) @[Single_cycle.scala 49:20]
    rs1 <= _T_1 @[Single_cycle.scala 49:9]
    node _T_2 = bits(io.rinst, 24, 20) @[Single_cycle.scala 50:20]
    rs2 <= _T_2 @[Single_cycle.scala 50:9]
    node _T_3 = bits(io.rinst, 14, 12) @[Single_cycle.scala 51:23]
    funct3 <= _T_3 @[Single_cycle.scala 51:12]
    node _T_4 = bits(io.rinst, 31, 7) @[Single_cycle.scala 52:26]
    inst_31_7 <= _T_4 @[Single_cycle.scala 52:15]
    pc.io.PCSel <= ct.io.PCSel @[Single_cycle.scala 55:17]
    pc.io.alu_out <= alu.io.out @[Single_cycle.scala 56:19]
    pc.io.Hcf <= ct.io.Hcf @[Single_cycle.scala 57:15]
    io.pc <= pc.io.pc @[Single_cycle.scala 60:11]
    ig.io.ImmSel <= ct.io.ImmSel @[Single_cycle.scala 63:18]
    ig.io.inst_31_7 <= inst_31_7 @[Single_cycle.scala 64:21]
    rf.io.raddr[0] <= rs1 @[Single_cycle.scala 67:20]
    rf.io.raddr[1] <= rs2 @[Single_cycle.scala 68:20]
    rf.io.waddr <= rd @[Single_cycle.scala 69:17]
    rf.io.wen <= ct.io.RegWEn @[Single_cycle.scala 70:15]
    node _T_5 = eq(ct.io.WBSel, UInt<1>("h0")) @[Single_cycle.scala 72:22]
    when _T_5 : @[Single_cycle.scala 72:30]
      rf.io.wdata <= io.rdata @[Single_cycle.scala 72:43]
    else :
      node _T_6 = eq(ct.io.WBSel, UInt<1>("h1")) @[Single_cycle.scala 73:27]
      when _T_6 : @[Single_cycle.scala 73:35]
        rf.io.wdata <= alu.io.out @[Single_cycle.scala 73:48]
      else :
        node _T_7 = eq(ct.io.WBSel, UInt<2>("h2")) @[Single_cycle.scala 74:27]
        when _T_7 : @[Single_cycle.scala 74:35]
          node _T_8 = add(pc.io.pc, UInt<3>("h4")) @[Single_cycle.scala 74:60]
          node _T_9 = tail(_T_8, 1) @[Single_cycle.scala 74:60]
          rf.io.wdata <= _T_9 @[Single_cycle.scala 74:48]
        else :
          rf.io.wdata <= UInt<1>("h0") @[Single_cycle.scala 75:28]
    wire rdata_or_zero : UInt<32> @[Single_cycle.scala 79:29]
    node _T_10 = mux(ct.io.Lui, UInt<32>("h0"), rf.io.rdata[0]) @[Single_cycle.scala 80:25]
    rdata_or_zero <= _T_10 @[Single_cycle.scala 80:19]
    node _T_11 = mux(ct.io.ASel, pc.io.pc, rdata_or_zero) @[Single_cycle.scala 81:23]
    alu.io.src1 <= _T_11 @[Single_cycle.scala 81:17]
    node _T_12 = mux(ct.io.BSel, ig.io.imm, rf.io.rdata[1]) @[Single_cycle.scala 82:23]
    alu.io.src2 <= _T_12 @[Single_cycle.scala 82:17]
    alu.io.ALUSel <= ct.io.ALUSel @[Single_cycle.scala 83:19]
    io.funct3 <= funct3 @[Single_cycle.scala 87:15]
    node _T_13 = bits(alu.io.out, 15, 0) @[Single_cycle.scala 88:27]
    io.raddr <= _T_13 @[Single_cycle.scala 88:14]
    io.MemRW <= ct.io.MemRW @[Single_cycle.scala 89:14]
    node _T_14 = bits(alu.io.out, 15, 0) @[Single_cycle.scala 90:27]
    io.waddr <= _T_14 @[Single_cycle.scala 90:14]
    io.wdata <= rf.io.rdata[1] @[Single_cycle.scala 91:14]
    bc.io.BrUn <= ct.io.BrUn @[Single_cycle.scala 94:16]
    bc.io.src1 <= rf.io.rdata[0] @[Single_cycle.scala 95:16]
    bc.io.src2 <= rf.io.rdata[1] @[Single_cycle.scala 96:16]
    ct.io.Inst <= io.rinst @[Single_cycle.scala 99:16]
    ct.io.BrEq <= bc.io.BrEq @[Single_cycle.scala 100:16]
    ct.io.BrLT <= bc.io.BrLT @[Single_cycle.scala 101:16]
    io.regs[0] <= rf.io.regs[0] @[Single_cycle.scala 104:13]
    io.regs[1] <= rf.io.regs[1] @[Single_cycle.scala 104:13]
    io.regs[2] <= rf.io.regs[2] @[Single_cycle.scala 104:13]
    io.regs[3] <= rf.io.regs[3] @[Single_cycle.scala 104:13]
    io.regs[4] <= rf.io.regs[4] @[Single_cycle.scala 104:13]
    io.regs[5] <= rf.io.regs[5] @[Single_cycle.scala 104:13]
    io.regs[6] <= rf.io.regs[6] @[Single_cycle.scala 104:13]
    io.regs[7] <= rf.io.regs[7] @[Single_cycle.scala 104:13]
    io.regs[8] <= rf.io.regs[8] @[Single_cycle.scala 104:13]
    io.regs[9] <= rf.io.regs[9] @[Single_cycle.scala 104:13]
    io.regs[10] <= rf.io.regs[10] @[Single_cycle.scala 104:13]
    io.regs[11] <= rf.io.regs[11] @[Single_cycle.scala 104:13]
    io.regs[12] <= rf.io.regs[12] @[Single_cycle.scala 104:13]
    io.regs[13] <= rf.io.regs[13] @[Single_cycle.scala 104:13]
    io.regs[14] <= rf.io.regs[14] @[Single_cycle.scala 104:13]
    io.regs[15] <= rf.io.regs[15] @[Single_cycle.scala 104:13]
    io.regs[16] <= rf.io.regs[16] @[Single_cycle.scala 104:13]
    io.regs[17] <= rf.io.regs[17] @[Single_cycle.scala 104:13]
    io.regs[18] <= rf.io.regs[18] @[Single_cycle.scala 104:13]
    io.regs[19] <= rf.io.regs[19] @[Single_cycle.scala 104:13]
    io.regs[20] <= rf.io.regs[20] @[Single_cycle.scala 104:13]
    io.regs[21] <= rf.io.regs[21] @[Single_cycle.scala 104:13]
    io.regs[22] <= rf.io.regs[22] @[Single_cycle.scala 104:13]
    io.regs[23] <= rf.io.regs[23] @[Single_cycle.scala 104:13]
    io.regs[24] <= rf.io.regs[24] @[Single_cycle.scala 104:13]
    io.regs[25] <= rf.io.regs[25] @[Single_cycle.scala 104:13]
    io.regs[26] <= rf.io.regs[26] @[Single_cycle.scala 104:13]
    io.regs[27] <= rf.io.regs[27] @[Single_cycle.scala 104:13]
    io.regs[28] <= rf.io.regs[28] @[Single_cycle.scala 104:13]
    io.regs[29] <= rf.io.regs[29] @[Single_cycle.scala 104:13]
    io.regs[30] <= rf.io.regs[30] @[Single_cycle.scala 104:13]
    io.regs[31] <= rf.io.regs[31] @[Single_cycle.scala 104:13]
    io.Hcf <= ct.io.Hcf @[Single_cycle.scala 105:12]
    inst vrf of Vector_RegFile @[Single_cycle.scala 116:21]
    vrf.clock <= clock
    vrf.reset <= reset
    inst valu of Vector_ALU @[Single_cycle.scala 117:22]
    valu.clock <= clock
    valu.reset <= reset
    wire vd : UInt<5> @[Single_cycle.scala 120:22]
    wire vs1 : UInt<5> @[Single_cycle.scala 121:22]
    wire vs2 : UInt<5> @[Single_cycle.scala 122:22]
    wire funct6 : UInt<6> @[Single_cycle.scala 123:22]
    node _T_15 = bits(io.rinst, 11, 7) @[Single_cycle.scala 125:20]
    vd <= _T_15 @[Single_cycle.scala 125:9]
    node _T_16 = bits(io.rinst, 19, 15) @[Single_cycle.scala 126:20]
    vs1 <= _T_16 @[Single_cycle.scala 126:9]
    node _T_17 = bits(io.rinst, 24, 20) @[Single_cycle.scala 127:20]
    vs2 <= _T_17 @[Single_cycle.scala 127:9]
    node _T_18 = bits(io.rinst, 31, 26) @[Single_cycle.scala 128:23]
    funct6 <= _T_18 @[Single_cycle.scala 128:12]
    vrf.io.vector_raddr[0] <= rs1 @[Single_cycle.scala 131:28]
    vrf.io.vector_raddr[1] <= rs2 @[Single_cycle.scala 132:28]
    vrf.io.vector_waddr <= vd @[Single_cycle.scala 133:25]
    vrf.io.vector_wen <= ct.io.vector_RegWEn @[Single_cycle.scala 134:23]
    node _T_19 = eq(ct.io.vector_WBSel, UInt<1>("h0")) @[Single_cycle.scala 136:29]
    when _T_19 : @[Single_cycle.scala 136:37]
      vrf.io.vector_wdata <= valu.io.vector_out @[Single_cycle.scala 136:58]
    else :
      vrf.io.vector_wdata <= UInt<1>("h0") @[Single_cycle.scala 137:36]
    valu.io.vector_src1 <= vrf.io.vector_rdata[0] @[Single_cycle.scala 140:25]
    valu.io.vector_src2 <= vrf.io.vector_rdata[1] @[Single_cycle.scala 141:25]
    valu.io.vector_ALUSel <= ct.io.vector_ALUSel @[Single_cycle.scala 142:27]
    io.vector_regs[0] <= vrf.io.vector_regs[0] @[Single_cycle.scala 145:20]
    io.vector_regs[1] <= vrf.io.vector_regs[1] @[Single_cycle.scala 145:20]
    io.vector_regs[2] <= vrf.io.vector_regs[2] @[Single_cycle.scala 145:20]
    io.vector_regs[3] <= vrf.io.vector_regs[3] @[Single_cycle.scala 145:20]
    io.vector_regs[4] <= vrf.io.vector_regs[4] @[Single_cycle.scala 145:20]
    io.vector_regs[5] <= vrf.io.vector_regs[5] @[Single_cycle.scala 145:20]
    io.vector_regs[6] <= vrf.io.vector_regs[6] @[Single_cycle.scala 145:20]
    io.vector_regs[7] <= vrf.io.vector_regs[7] @[Single_cycle.scala 145:20]
    io.vector_regs[8] <= vrf.io.vector_regs[8] @[Single_cycle.scala 145:20]
    io.vector_regs[9] <= vrf.io.vector_regs[9] @[Single_cycle.scala 145:20]
    io.vector_regs[10] <= vrf.io.vector_regs[10] @[Single_cycle.scala 145:20]
    io.vector_regs[11] <= vrf.io.vector_regs[11] @[Single_cycle.scala 145:20]
    io.vector_regs[12] <= vrf.io.vector_regs[12] @[Single_cycle.scala 145:20]
    io.vector_regs[13] <= vrf.io.vector_regs[13] @[Single_cycle.scala 145:20]
    io.vector_regs[14] <= vrf.io.vector_regs[14] @[Single_cycle.scala 145:20]
    io.vector_regs[15] <= vrf.io.vector_regs[15] @[Single_cycle.scala 145:20]
    io.vector_regs[16] <= vrf.io.vector_regs[16] @[Single_cycle.scala 145:20]
    io.vector_regs[17] <= vrf.io.vector_regs[17] @[Single_cycle.scala 145:20]
    io.vector_regs[18] <= vrf.io.vector_regs[18] @[Single_cycle.scala 145:20]
    io.vector_regs[19] <= vrf.io.vector_regs[19] @[Single_cycle.scala 145:20]
    io.vector_regs[20] <= vrf.io.vector_regs[20] @[Single_cycle.scala 145:20]
    io.vector_regs[21] <= vrf.io.vector_regs[21] @[Single_cycle.scala 145:20]
    io.vector_regs[22] <= vrf.io.vector_regs[22] @[Single_cycle.scala 145:20]
    io.vector_regs[23] <= vrf.io.vector_regs[23] @[Single_cycle.scala 145:20]
    io.vector_regs[24] <= vrf.io.vector_regs[24] @[Single_cycle.scala 145:20]
    io.vector_regs[25] <= vrf.io.vector_regs[25] @[Single_cycle.scala 145:20]
    io.vector_regs[26] <= vrf.io.vector_regs[26] @[Single_cycle.scala 145:20]
    io.vector_regs[27] <= vrf.io.vector_regs[27] @[Single_cycle.scala 145:20]
    io.vector_regs[28] <= vrf.io.vector_regs[28] @[Single_cycle.scala 145:20]
    io.vector_regs[29] <= vrf.io.vector_regs[29] @[Single_cycle.scala 145:20]
    io.vector_regs[30] <= vrf.io.vector_regs[30] @[Single_cycle.scala 145:20]
    io.vector_regs[31] <= vrf.io.vector_regs[31] @[Single_cycle.scala 145:20]

  module InstMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<15>, inst : UInt<32>}

    cmem memory : UInt<8> [32768] @[InstMem.scala 14:19]
    wire rdata : UInt<32> @[InstMem.scala 17:19]
    node _T = add(io.raddr, UInt<2>("h3")) @[InstMem.scala 18:32]
    node _T_1 = tail(_T, 1) @[InstMem.scala 18:32]
    infer mport MPORT = memory[_T_1], clock @[InstMem.scala 18:22]
    node _T_2 = add(io.raddr, UInt<2>("h2")) @[InstMem.scala 19:31]
    node _T_3 = tail(_T_2, 1) @[InstMem.scala 19:31]
    infer mport MPORT_1 = memory[_T_3], clock @[InstMem.scala 19:21]
    node _T_4 = add(io.raddr, UInt<1>("h1")) @[InstMem.scala 20:31]
    node _T_5 = tail(_T_4, 1) @[InstMem.scala 20:31]
    infer mport MPORT_2 = memory[_T_5], clock @[InstMem.scala 20:21]
    node _T_6 = add(io.raddr, UInt<1>("h0")) @[InstMem.scala 21:31]
    node _T_7 = tail(_T_6, 1) @[InstMem.scala 21:31]
    infer mport MPORT_3 = memory[_T_7], clock @[InstMem.scala 21:21]
    node lo = cat(MPORT_2, MPORT_3) @[Cat.scala 30:58]
    node hi = cat(MPORT, MPORT_1) @[Cat.scala 30:58]
    node _T_8 = cat(hi, lo) @[Cat.scala 30:58]
    rdata <= _T_8 @[InstMem.scala 18:9]
    io.inst <= rdata @[InstMem.scala 23:11]

  module DataMem :
    input clock : Clock
    input reset : Reset
    output io : { flip funct3 : UInt<32>, flip raddr : UInt<15>, rdata : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<15>, flip wdata : UInt<32>}

    cmem memory : UInt<8> [32768] @[DataMem.scala 30:19]
    wire srdata : SInt<32> @[DataMem.scala 33:20]
    node _T = asUInt(srdata) @[DataMem.scala 35:22]
    io.rdata <= _T @[DataMem.scala 35:12]
    wire wa : UInt<15>
    wa <= UInt<15>("h0")
    wire wd : UInt<32>
    wd <= UInt<32>("h0")
    node _T_1 = not(UInt<15>("h1")) @[DataMem.scala 42:25]
    node _T_2 = and(io.waddr, _T_1) @[DataMem.scala 42:23]
    node _T_3 = not(UInt<15>("h3")) @[DataMem.scala 43:25]
    node _T_4 = and(io.waddr, _T_3) @[DataMem.scala 43:23]
    node _T_5 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
    node _T_6 = mux(_T_5, io.waddr, UInt<15>("h0")) @[Mux.scala 80:57]
    node _T_7 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
    node _T_8 = mux(_T_7, _T_2, _T_6) @[Mux.scala 80:57]
    node _T_9 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
    node _T_10 = mux(_T_9, _T_4, _T_8) @[Mux.scala 80:57]
    wa <= _T_10 @[DataMem.scala 40:6]
    node _T_11 = bits(io.wdata, 7, 0) @[DataMem.scala 47:21]
    node _T_12 = bits(io.wdata, 15, 0) @[DataMem.scala 48:21]
    node _T_13 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
    node _T_14 = mux(_T_13, _T_11, UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_15 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
    node _T_16 = mux(_T_15, _T_12, _T_14) @[Mux.scala 80:57]
    node _T_17 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
    node _T_18 = mux(_T_17, io.wdata, _T_16) @[Mux.scala 80:57]
    wd <= _T_18 @[DataMem.scala 46:6]
    srdata <= asSInt(UInt<1>("h0")) @[DataMem.scala 52:10]
    when io.wen : @[DataMem.scala 54:15]
      node _T_19 = eq(io.funct3, UInt<1>("h0")) @[DataMem.scala 55:19]
      when _T_19 : @[DataMem.scala 55:27]
        infer mport MPORT = memory[wa], clock @[DataMem.scala 56:13]
        node _T_20 = bits(wd, 7, 0) @[DataMem.scala 56:23]
        MPORT <= _T_20 @[DataMem.scala 56:18]
      else :
        node _T_21 = eq(io.funct3, UInt<1>("h1")) @[DataMem.scala 57:25]
        when _T_21 : @[DataMem.scala 57:33]
          infer mport MPORT_1 = memory[wa], clock @[DataMem.scala 58:13]
          node _T_22 = bits(wd, 7, 0) @[DataMem.scala 58:23]
          MPORT_1 <= _T_22 @[DataMem.scala 58:18]
          node _T_23 = add(wa, UInt<15>("h1")) @[DataMem.scala 59:16]
          node _T_24 = tail(_T_23, 1) @[DataMem.scala 59:16]
          infer mport MPORT_2 = memory[_T_24], clock @[DataMem.scala 59:13]
          node _T_25 = bits(wd, 15, 8) @[DataMem.scala 59:35]
          MPORT_2 <= _T_25 @[DataMem.scala 59:30]
        else :
          node _T_26 = eq(io.funct3, UInt<2>("h2")) @[DataMem.scala 60:25]
          when _T_26 : @[DataMem.scala 60:33]
            infer mport MPORT_3 = memory[wa], clock @[DataMem.scala 61:13]
            node _T_27 = bits(wd, 7, 0) @[DataMem.scala 61:23]
            MPORT_3 <= _T_27 @[DataMem.scala 61:18]
            node _T_28 = add(wa, UInt<15>("h1")) @[DataMem.scala 62:16]
            node _T_29 = tail(_T_28, 1) @[DataMem.scala 62:16]
            infer mport MPORT_4 = memory[_T_29], clock @[DataMem.scala 62:13]
            node _T_30 = bits(wd, 15, 8) @[DataMem.scala 62:35]
            MPORT_4 <= _T_30 @[DataMem.scala 62:30]
            node _T_31 = add(wa, UInt<15>("h2")) @[DataMem.scala 63:16]
            node _T_32 = tail(_T_31, 1) @[DataMem.scala 63:16]
            infer mport MPORT_5 = memory[_T_32], clock @[DataMem.scala 63:13]
            node _T_33 = bits(wd, 23, 16) @[DataMem.scala 63:35]
            MPORT_5 <= _T_33 @[DataMem.scala 63:30]
            node _T_34 = add(wa, UInt<15>("h3")) @[DataMem.scala 64:16]
            node _T_35 = tail(_T_34, 1) @[DataMem.scala 64:16]
            infer mport MPORT_6 = memory[_T_35], clock @[DataMem.scala 64:13]
            node _T_36 = bits(wd, 31, 24) @[DataMem.scala 64:35]
            MPORT_6 <= _T_36 @[DataMem.scala 64:30]
    else :
      infer mport MPORT_7 = memory[io.raddr], clock @[DataMem.scala 68:21]
      node _T_37 = asSInt(MPORT_7) @[DataMem.scala 68:32]
      node _T_38 = not(UInt<15>("h1")) @[DataMem.scala 69:39]
      node _T_39 = and(io.raddr, _T_38) @[DataMem.scala 69:36]
      node _T_40 = add(_T_39, UInt<1>("h1")) @[DataMem.scala 69:56]
      node _T_41 = tail(_T_40, 1) @[DataMem.scala 69:56]
      infer mport MPORT_8 = memory[_T_41], clock @[DataMem.scala 69:25]
      node _T_42 = not(UInt<15>("h1")) @[DataMem.scala 70:38]
      node _T_43 = and(io.raddr, _T_42) @[DataMem.scala 70:35]
      infer mport MPORT_9 = memory[_T_43], clock @[DataMem.scala 70:25]
      node _T_44 = cat(MPORT_8, MPORT_9) @[Cat.scala 30:58]
      node _T_45 = asSInt(_T_44) @[DataMem.scala 70:56]
      node _T_46 = not(UInt<15>("h3")) @[DataMem.scala 71:38]
      node _T_47 = and(io.raddr, _T_46) @[DataMem.scala 71:36]
      node _T_48 = add(_T_47, UInt<2>("h3")) @[DataMem.scala 71:54]
      node _T_49 = tail(_T_48, 1) @[DataMem.scala 71:54]
      infer mport MPORT_10 = memory[_T_49], clock @[DataMem.scala 71:25]
      node _T_50 = not(UInt<15>("h3")) @[DataMem.scala 72:38]
      node _T_51 = and(io.raddr, _T_50) @[DataMem.scala 72:36]
      node _T_52 = add(_T_51, UInt<2>("h2")) @[DataMem.scala 72:54]
      node _T_53 = tail(_T_52, 1) @[DataMem.scala 72:54]
      infer mport MPORT_11 = memory[_T_53], clock @[DataMem.scala 72:25]
      node _T_54 = not(UInt<15>("h3")) @[DataMem.scala 73:38]
      node _T_55 = and(io.raddr, _T_54) @[DataMem.scala 73:36]
      node _T_56 = add(_T_55, UInt<1>("h1")) @[DataMem.scala 73:54]
      node _T_57 = tail(_T_56, 1) @[DataMem.scala 73:54]
      infer mport MPORT_12 = memory[_T_57], clock @[DataMem.scala 73:25]
      node _T_58 = not(UInt<15>("h3")) @[DataMem.scala 74:37]
      node _T_59 = and(io.raddr, _T_58) @[DataMem.scala 74:35]
      infer mport MPORT_13 = memory[_T_59], clock @[DataMem.scala 74:25]
      node lo = cat(MPORT_12, MPORT_13) @[Cat.scala 30:58]
      node hi = cat(MPORT_10, MPORT_11) @[Cat.scala 30:58]
      node _T_60 = cat(hi, lo) @[Cat.scala 30:58]
      node _T_61 = asSInt(_T_60) @[DataMem.scala 74:54]
      infer mport MPORT_14 = memory[io.raddr], clock @[DataMem.scala 75:36]
      node _T_62 = cat(UInt<24>("h0"), MPORT_14) @[Cat.scala 30:58]
      node _T_63 = asSInt(_T_62) @[DataMem.scala 75:48]
      node _T_64 = not(UInt<15>("h1")) @[DataMem.scala 77:38]
      node _T_65 = and(io.raddr, _T_64) @[DataMem.scala 77:36]
      node _T_66 = add(_T_65, UInt<1>("h1")) @[DataMem.scala 77:54]
      node _T_67 = tail(_T_66, 1) @[DataMem.scala 77:54]
      infer mport MPORT_15 = memory[_T_67], clock @[DataMem.scala 77:25]
      node _T_68 = not(UInt<15>("h1")) @[DataMem.scala 78:37]
      node _T_69 = and(io.raddr, _T_68) @[DataMem.scala 78:35]
      infer mport MPORT_16 = memory[_T_69], clock @[DataMem.scala 78:25]
      node hi_1 = cat(UInt<16>("h0"), MPORT_15) @[Cat.scala 30:58]
      node _T_70 = cat(hi_1, MPORT_16) @[Cat.scala 30:58]
      node _T_71 = asSInt(_T_70) @[DataMem.scala 78:54]
      node _T_72 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
      node _T_73 = mux(_T_72, _T_37, asSInt(UInt<1>("h0"))) @[Mux.scala 80:57]
      node _T_74 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
      node _T_75 = mux(_T_74, _T_45, _T_73) @[Mux.scala 80:57]
      node _T_76 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
      node _T_77 = mux(_T_76, _T_61, _T_75) @[Mux.scala 80:57]
      node _T_78 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 80:60]
      node _T_79 = mux(_T_78, _T_63, _T_77) @[Mux.scala 80:57]
      node _T_80 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 80:60]
      node _T_81 = mux(_T_80, _T_71, _T_79) @[Mux.scala 80:57]
      srdata <= _T_81 @[DataMem.scala 67:12]

  module top :
    input clock : Clock
    input reset : UInt<1>
    output io : { pc : UInt<15>, regs : UInt<32>[32], Hcf : UInt<1>, inst : UInt<32>, rdata : UInt<32>, vector_regs : UInt<64>[32]}

    inst sc of Single_Cycle @[top.scala 29:20]
    sc.clock <= clock
    sc.reset <= reset
    inst im of InstMem @[top.scala 30:20]
    im.clock <= clock
    im.reset <= reset
    inst dm of DataMem @[top.scala 31:20]
    dm.clock <= clock
    dm.reset <= reset
    sc.io.rinst <= im.io.inst @[top.scala 34:17]
    sc.io.rdata <= dm.io.rdata @[top.scala 35:17]
    im.io.raddr <= sc.io.pc @[top.scala 38:17]
    dm.io.funct3 <= sc.io.funct3 @[top.scala 41:18]
    dm.io.raddr <= sc.io.raddr @[top.scala 42:17]
    dm.io.wen <= sc.io.MemRW @[top.scala 43:15]
    dm.io.waddr <= sc.io.waddr @[top.scala 44:17]
    dm.io.wdata <= sc.io.wdata @[top.scala 45:17]
    io.pc <= sc.io.pc @[top.scala 48:11]
    io.regs[0] <= sc.io.regs[0] @[top.scala 49:13]
    io.regs[1] <= sc.io.regs[1] @[top.scala 49:13]
    io.regs[2] <= sc.io.regs[2] @[top.scala 49:13]
    io.regs[3] <= sc.io.regs[3] @[top.scala 49:13]
    io.regs[4] <= sc.io.regs[4] @[top.scala 49:13]
    io.regs[5] <= sc.io.regs[5] @[top.scala 49:13]
    io.regs[6] <= sc.io.regs[6] @[top.scala 49:13]
    io.regs[7] <= sc.io.regs[7] @[top.scala 49:13]
    io.regs[8] <= sc.io.regs[8] @[top.scala 49:13]
    io.regs[9] <= sc.io.regs[9] @[top.scala 49:13]
    io.regs[10] <= sc.io.regs[10] @[top.scala 49:13]
    io.regs[11] <= sc.io.regs[11] @[top.scala 49:13]
    io.regs[12] <= sc.io.regs[12] @[top.scala 49:13]
    io.regs[13] <= sc.io.regs[13] @[top.scala 49:13]
    io.regs[14] <= sc.io.regs[14] @[top.scala 49:13]
    io.regs[15] <= sc.io.regs[15] @[top.scala 49:13]
    io.regs[16] <= sc.io.regs[16] @[top.scala 49:13]
    io.regs[17] <= sc.io.regs[17] @[top.scala 49:13]
    io.regs[18] <= sc.io.regs[18] @[top.scala 49:13]
    io.regs[19] <= sc.io.regs[19] @[top.scala 49:13]
    io.regs[20] <= sc.io.regs[20] @[top.scala 49:13]
    io.regs[21] <= sc.io.regs[21] @[top.scala 49:13]
    io.regs[22] <= sc.io.regs[22] @[top.scala 49:13]
    io.regs[23] <= sc.io.regs[23] @[top.scala 49:13]
    io.regs[24] <= sc.io.regs[24] @[top.scala 49:13]
    io.regs[25] <= sc.io.regs[25] @[top.scala 49:13]
    io.regs[26] <= sc.io.regs[26] @[top.scala 49:13]
    io.regs[27] <= sc.io.regs[27] @[top.scala 49:13]
    io.regs[28] <= sc.io.regs[28] @[top.scala 49:13]
    io.regs[29] <= sc.io.regs[29] @[top.scala 49:13]
    io.regs[30] <= sc.io.regs[30] @[top.scala 49:13]
    io.regs[31] <= sc.io.regs[31] @[top.scala 49:13]
    io.Hcf <= sc.io.Hcf @[top.scala 50:12]
    io.inst <= im.io.inst @[top.scala 51:13]
    io.rdata <= dm.io.rdata @[top.scala 52:14]
    io.vector_regs[0] <= sc.io.vector_regs[0] @[top.scala 61:20]
    io.vector_regs[1] <= sc.io.vector_regs[1] @[top.scala 61:20]
    io.vector_regs[2] <= sc.io.vector_regs[2] @[top.scala 61:20]
    io.vector_regs[3] <= sc.io.vector_regs[3] @[top.scala 61:20]
    io.vector_regs[4] <= sc.io.vector_regs[4] @[top.scala 61:20]
    io.vector_regs[5] <= sc.io.vector_regs[5] @[top.scala 61:20]
    io.vector_regs[6] <= sc.io.vector_regs[6] @[top.scala 61:20]
    io.vector_regs[7] <= sc.io.vector_regs[7] @[top.scala 61:20]
    io.vector_regs[8] <= sc.io.vector_regs[8] @[top.scala 61:20]
    io.vector_regs[9] <= sc.io.vector_regs[9] @[top.scala 61:20]
    io.vector_regs[10] <= sc.io.vector_regs[10] @[top.scala 61:20]
    io.vector_regs[11] <= sc.io.vector_regs[11] @[top.scala 61:20]
    io.vector_regs[12] <= sc.io.vector_regs[12] @[top.scala 61:20]
    io.vector_regs[13] <= sc.io.vector_regs[13] @[top.scala 61:20]
    io.vector_regs[14] <= sc.io.vector_regs[14] @[top.scala 61:20]
    io.vector_regs[15] <= sc.io.vector_regs[15] @[top.scala 61:20]
    io.vector_regs[16] <= sc.io.vector_regs[16] @[top.scala 61:20]
    io.vector_regs[17] <= sc.io.vector_regs[17] @[top.scala 61:20]
    io.vector_regs[18] <= sc.io.vector_regs[18] @[top.scala 61:20]
    io.vector_regs[19] <= sc.io.vector_regs[19] @[top.scala 61:20]
    io.vector_regs[20] <= sc.io.vector_regs[20] @[top.scala 61:20]
    io.vector_regs[21] <= sc.io.vector_regs[21] @[top.scala 61:20]
    io.vector_regs[22] <= sc.io.vector_regs[22] @[top.scala 61:20]
    io.vector_regs[23] <= sc.io.vector_regs[23] @[top.scala 61:20]
    io.vector_regs[24] <= sc.io.vector_regs[24] @[top.scala 61:20]
    io.vector_regs[25] <= sc.io.vector_regs[25] @[top.scala 61:20]
    io.vector_regs[26] <= sc.io.vector_regs[26] @[top.scala 61:20]
    io.vector_regs[27] <= sc.io.vector_regs[27] @[top.scala 61:20]
    io.vector_regs[28] <= sc.io.vector_regs[28] @[top.scala 61:20]
    io.vector_regs[29] <= sc.io.vector_regs[29] @[top.scala 61:20]
    io.vector_regs[30] <= sc.io.vector_regs[30] @[top.scala 61:20]
    io.vector_regs[31] <= sc.io.vector_regs[31] @[top.scala 61:20]

