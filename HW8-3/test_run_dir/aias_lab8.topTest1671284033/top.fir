circuit top :
  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip Inst : UInt<32>, flip BrEq : UInt<1>, flip BrLT : UInt<1>, PCSel : UInt<1>, ImmSel : UInt<3>, RegWEn : UInt<1>, BrUn : UInt<1>, BSel : UInt<1>, ASel : UInt<1>, ALUSel : UInt<4>, MemRW : UInt<3>, WBSel : UInt<2>, Lui : UInt<1>, Hcf : UInt<1>, vector_ALUSel : UInt<4>, vector_ASel : UInt<1>, vector_BSel : UInt<1>, vector_WBSel : UInt<2>, vector_RegWEn : UInt<1>}

    wire opcode : UInt<7> @[Controller.scala 109:22]
    node _T = bits(io.Inst, 6, 0) @[Controller.scala 110:22]
    opcode <= _T @[Controller.scala 110:12]
    wire funct3 : UInt<3> @[Controller.scala 112:22]
    node _T_1 = bits(io.Inst, 14, 12) @[Controller.scala 113:22]
    funct3 <= _T_1 @[Controller.scala 113:12]
    wire funct7 : UInt<7> @[Controller.scala 115:22]
    node _T_2 = bits(io.Inst, 31, 25) @[Controller.scala 116:22]
    funct7 <= _T_2 @[Controller.scala 116:12]
    wire funct6 : UInt<6> @[Controller.scala 119:22]
    node _T_3 = bits(io.Inst, 31, 26) @[Controller.scala 120:22]
    funct6 <= _T_3 @[Controller.scala 120:12]
    node _T_4 = eq(opcode, UInt<6>("h23")) @[Controller.scala 123:28]
    node _T_5 = eq(opcode, UInt<7>("h63")) @[Controller.scala 123:44]
    node _T_6 = or(_T_4, _T_5) @[Controller.scala 123:36]
    node _T_7 = eq(opcode, UInt<4>("hb")) @[Controller.scala 123:61]
    node _T_8 = or(_T_6, _T_7) @[Controller.scala 123:53]
    node _T_9 = eq(opcode, UInt<7>("h57")) @[Controller.scala 123:75]
    node _T_10 = or(_T_8, _T_9) @[Controller.scala 123:67]
    node _T_11 = eq(opcode, UInt<3>("h7")) @[Controller.scala 123:89]
    node _T_12 = or(_T_10, _T_11) @[Controller.scala 123:81]
    node _T_13 = eq(opcode, UInt<6>("h27")) @[Controller.scala 123:105]
    node _T_14 = or(_T_12, _T_13) @[Controller.scala 123:97]
    node _T_15 = mux(_T_14, UInt<1>("h0"), UInt<1>("h1")) @[Controller.scala 123:21]
    io.RegWEn <= _T_15 @[Controller.scala 123:15]
    node _T_16 = eq(opcode, UInt<7>("h63")) @[Controller.scala 124:26]
    node _T_17 = eq(opcode, UInt<7>("h6f")) @[Controller.scala 124:43]
    node _T_18 = or(_T_16, _T_17) @[Controller.scala 124:35]
    node _T_19 = mux(_T_18, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 124:19]
    io.ASel <= _T_19 @[Controller.scala 124:13]
    node _T_20 = eq(opcode, UInt<6>("h33")) @[Controller.scala 125:26]
    node _T_21 = mux(_T_20, UInt<1>("h0"), UInt<1>("h1")) @[Controller.scala 125:19]
    io.BSel <= _T_21 @[Controller.scala 125:13]
    node _T_22 = eq(funct3, UInt<3>("h6")) @[Controller.scala 126:26]
    node _T_23 = eq(funct3, UInt<3>("h7")) @[Controller.scala 126:40]
    node _T_24 = or(_T_22, _T_23) @[Controller.scala 126:32]
    node _T_25 = mux(_T_24, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 126:19]
    io.BrUn <= _T_25 @[Controller.scala 126:13]
    node _T_26 = eq(UInt<6>("h23"), opcode) @[Mux.scala 80:60]
    node _T_27 = mux(_T_26, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 80:57]
    node _T_28 = eq(UInt<2>("h3"), opcode) @[Mux.scala 80:60]
    node _T_29 = mux(_T_28, UInt<1>("h1"), _T_27) @[Mux.scala 80:57]
    node _T_30 = eq(UInt<6>("h27"), opcode) @[Mux.scala 80:60]
    node _T_31 = mux(_T_30, UInt<2>("h2"), _T_29) @[Mux.scala 80:57]
    node _T_32 = eq(UInt<3>("h7"), opcode) @[Mux.scala 80:60]
    node _T_33 = mux(_T_32, UInt<2>("h3"), _T_31) @[Mux.scala 80:57]
    io.MemRW <= _T_33 @[Controller.scala 127:14]
    node _T_34 = eq(UInt<2>("h3"), opcode) @[Mux.scala 80:60]
    node _T_35 = mux(_T_34, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_36 = eq(UInt<6>("h23"), opcode) @[Mux.scala 80:60]
    node _T_37 = mux(_T_36, UInt<2>("h2"), _T_35) @[Mux.scala 80:57]
    node _T_38 = eq(UInt<7>("h63"), opcode) @[Mux.scala 80:60]
    node _T_39 = mux(_T_38, UInt<2>("h3"), _T_37) @[Mux.scala 80:57]
    node _T_40 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 80:60]
    node _T_41 = mux(_T_40, UInt<3>("h4"), _T_39) @[Mux.scala 80:57]
    node _T_42 = eq(UInt<7>("h67"), opcode) @[Mux.scala 80:60]
    node _T_43 = mux(_T_42, UInt<1>("h1"), _T_41) @[Mux.scala 80:57]
    node _T_44 = eq(UInt<6>("h33"), opcode) @[Mux.scala 80:60]
    node _T_45 = mux(_T_44, UInt<1>("h0"), _T_43) @[Mux.scala 80:57]
    node _T_46 = eq(UInt<5>("h13"), opcode) @[Mux.scala 80:60]
    node _T_47 = mux(_T_46, UInt<1>("h1"), _T_45) @[Mux.scala 80:57]
    node _T_48 = eq(UInt<5>("h17"), opcode) @[Mux.scala 80:60]
    node _T_49 = mux(_T_48, UInt<3>("h5"), _T_47) @[Mux.scala 80:57]
    node _T_50 = eq(UInt<6>("h37"), opcode) @[Mux.scala 80:60]
    node _T_51 = mux(_T_50, UInt<3>("h5"), _T_49) @[Mux.scala 80:57]
    node _T_52 = eq(UInt<3>("h7"), opcode) @[Mux.scala 80:60]
    node _T_53 = mux(_T_52, UInt<3>("h6"), _T_51) @[Mux.scala 80:57]
    node _T_54 = eq(UInt<6>("h27"), opcode) @[Mux.scala 80:60]
    node _T_55 = mux(_T_54, UInt<3>("h6"), _T_53) @[Mux.scala 80:57]
    io.ImmSel <= _T_55 @[Controller.scala 134:15]
    node _T_56 = eq(opcode, UInt<6>("h33")) @[Controller.scala 148:28]
    node _T_57 = eq(opcode, UInt<5>("h13")) @[Controller.scala 148:41]
    node _T_58 = or(_T_56, _T_57) @[Controller.scala 148:33]
    node _T_59 = mux(_T_58, funct3, UInt<1>("h0")) @[Controller.scala 148:21]
    io.ALUSel <= _T_59 @[Controller.scala 148:15]
    node _T_60 = eq(funct3, UInt<1>("h0")) @[Controller.scala 149:16]
    node _T_61 = eq(opcode, UInt<6>("h33")) @[Controller.scala 149:33]
    node _T_62 = eq(opcode, UInt<5>("h13")) @[Controller.scala 149:46]
    node _T_63 = or(_T_61, _T_62) @[Controller.scala 149:38]
    node _T_64 = and(_T_60, _T_63) @[Controller.scala 149:23]
    node _T_65 = bits(funct7, 0, 0) @[Controller.scala 149:66]
    node _T_66 = neq(_T_65, UInt<1>("h1")) @[Controller.scala 149:69]
    node _T_67 = and(_T_64, _T_66) @[Controller.scala 149:57]
    when _T_67 : @[Controller.scala 149:76]
      node _T_68 = eq(funct7, UInt<6>("h20")) @[Controller.scala 150:18]
      when _T_68 : @[Controller.scala 150:29]
        io.ALUSel <= UInt<4>("h8") @[Controller.scala 151:18]
      else :
        io.ALUSel <= UInt<1>("h0") @[Controller.scala 153:18]
    else :
      node _T_69 = eq(funct3, UInt<3>("h5")) @[Controller.scala 155:22]
      node _T_70 = eq(opcode, UInt<6>("h33")) @[Controller.scala 155:39]
      node _T_71 = eq(opcode, UInt<5>("h13")) @[Controller.scala 155:52]
      node _T_72 = or(_T_70, _T_71) @[Controller.scala 155:44]
      node _T_73 = and(_T_69, _T_72) @[Controller.scala 155:29]
      when _T_73 : @[Controller.scala 155:63]
        node _T_74 = eq(funct7, UInt<6>("h20")) @[Controller.scala 156:18]
        when _T_74 : @[Controller.scala 156:29]
          io.ALUSel <= UInt<4>("hd") @[Controller.scala 157:18]
        else :
          io.ALUSel <= UInt<3>("h5") @[Controller.scala 159:18]
      else :
        node _T_75 = bits(funct7, 0, 0) @[Controller.scala 161:22]
        node _T_76 = eq(_T_75, UInt<1>("h1")) @[Controller.scala 161:25]
        node _T_77 = eq(opcode, UInt<6>("h33")) @[Controller.scala 161:41]
        node _T_78 = and(_T_76, _T_77) @[Controller.scala 161:32]
        when _T_78 : @[Controller.scala 161:47]
          node _T_79 = eq(funct3, UInt<1>("h0")) @[Controller.scala 162:18]
          when _T_79 : @[Controller.scala 162:25]
            io.ALUSel <= UInt<4>("h9") @[Controller.scala 163:18]
          else :
            node _T_80 = eq(funct3, UInt<3>("h4")) @[Controller.scala 164:24]
            when _T_80 : @[Controller.scala 164:31]
              io.ALUSel <= UInt<4>("ha") @[Controller.scala 165:18]
    node _T_81 = eq(opcode, UInt<7>("h6f")) @[Controller.scala 169:27]
    node _T_82 = eq(opcode, UInt<7>("h67")) @[Controller.scala 169:41]
    node _T_83 = or(_T_81, _T_82) @[Controller.scala 169:33]
    node _T_84 = mux(_T_83, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 169:20]
    io.PCSel <= _T_84 @[Controller.scala 169:14]
    node _T_85 = eq(opcode, UInt<7>("h63")) @[Controller.scala 170:16]
    when _T_85 : @[Controller.scala 170:26]
      node _T_86 = eq(UInt<1>("h0"), funct3) @[Conditional.scala 37:30]
      when _T_86 : @[Conditional.scala 40:58]
        io.PCSel <= io.BrEq @[Controller.scala 173:19]
      else :
        node _T_87 = eq(UInt<1>("h1"), funct3) @[Conditional.scala 37:30]
        when _T_87 : @[Conditional.scala 39:67]
          node _T_88 = not(io.BrEq) @[Controller.scala 176:22]
          io.PCSel <= _T_88 @[Controller.scala 176:19]
        else :
          node _T_89 = eq(UInt<3>("h4"), funct3) @[Conditional.scala 37:30]
          when _T_89 : @[Conditional.scala 39:67]
            io.PCSel <= io.BrLT @[Controller.scala 179:19]
          else :
            node _T_90 = eq(UInt<3>("h5"), funct3) @[Conditional.scala 37:30]
            when _T_90 : @[Conditional.scala 39:67]
              node _T_91 = not(io.BrLT) @[Controller.scala 182:22]
              io.PCSel <= _T_91 @[Controller.scala 182:19]
            else :
              node _T_92 = eq(UInt<3>("h6"), funct3) @[Conditional.scala 37:30]
              when _T_92 : @[Conditional.scala 39:67]
                io.PCSel <= io.BrLT @[Controller.scala 185:19]
              else :
                node _T_93 = eq(UInt<3>("h7"), funct3) @[Conditional.scala 37:30]
                when _T_93 : @[Conditional.scala 39:67]
                  node _T_94 = not(io.BrLT) @[Controller.scala 188:22]
                  io.PCSel <= _T_94 @[Controller.scala 188:19]
    node _T_95 = eq(opcode, UInt<6>("h37")) @[Controller.scala 194:21]
    io.Lui <= _T_95 @[Controller.scala 194:12]
    node _T_96 = eq(opcode, UInt<4>("hb")) @[Controller.scala 195:21]
    io.Hcf <= _T_96 @[Controller.scala 195:12]
    node _T_97 = eq(opcode, UInt<2>("h3")) @[Controller.scala 197:16]
    node _T_98 = eq(opcode, UInt<6>("h23")) @[Controller.scala 197:31]
    node _T_99 = or(_T_97, _T_98) @[Controller.scala 197:23]
    when _T_99 : @[Controller.scala 197:40]
      io.WBSel <= UInt<1>("h0") @[Controller.scala 198:17]
    else :
      node _T_100 = eq(opcode, UInt<7>("h67")) @[Controller.scala 199:22]
      node _T_101 = eq(opcode, UInt<7>("h6f")) @[Controller.scala 199:37]
      node _T_102 = or(_T_100, _T_101) @[Controller.scala 199:29]
      when _T_102 : @[Controller.scala 199:44]
        io.WBSel <= UInt<2>("h2") @[Controller.scala 200:17]
      else :
        io.WBSel <= UInt<1>("h1") @[Controller.scala 202:17]
    io.vector_ALUSel <= UInt<3>("h5") @[Controller.scala 213:22]
    node _T_103 = eq(opcode, UInt<7>("h57")) @[Controller.scala 214:16]
    when _T_103 : @[Controller.scala 214:23]
      node _T_104 = eq(funct6, UInt<1>("h0")) @[Controller.scala 215:18]
      when _T_104 : @[Controller.scala 215:33]
        io.vector_ALUSel <= UInt<1>("h0") @[Controller.scala 216:26]
      else :
        node _T_105 = eq(funct6, UInt<6>("h25")) @[Controller.scala 217:24]
        when _T_105 : @[Controller.scala 217:39]
          node _T_106 = eq(funct3, UInt<1>("h0")) @[Controller.scala 218:20]
          when _T_106 : @[Controller.scala 218:32]
            io.vector_ALUSel <= UInt<1>("h1") @[Controller.scala 219:28]
          else :
            node _T_107 = eq(funct3, UInt<3>("h4")) @[Controller.scala 220:26]
            when _T_107 : @[Controller.scala 220:38]
              io.vector_ALUSel <= UInt<3>("h4") @[Controller.scala 221:28]
    node _T_108 = eq(opcode, UInt<7>("h57")) @[Controller.scala 225:35]
    node _T_109 = lt(funct3, UInt<2>("h3")) @[Controller.scala 225:51]
    node _T_110 = and(_T_108, _T_109) @[Controller.scala 225:42]
    node _T_111 = mux(_T_110, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 225:28]
    io.vector_ASel <= _T_111 @[Controller.scala 225:22]
    node _T_112 = eq(opcode, UInt<7>("h57")) @[Controller.scala 226:35]
    node _T_113 = mux(_T_112, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 226:28]
    io.vector_BSel <= _T_113 @[Controller.scala 226:22]
    node _T_114 = eq(opcode, UInt<7>("h57")) @[Controller.scala 227:35]
    node _T_115 = eq(opcode, UInt<3>("h7")) @[Controller.scala 227:51]
    node _T_116 = or(_T_114, _T_115) @[Controller.scala 227:42]
    node _T_117 = mux(_T_116, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 227:28]
    io.vector_RegWEn <= _T_117 @[Controller.scala 227:22]
    node _T_118 = eq(opcode, UInt<7>("h57")) @[Controller.scala 228:35]
    node _T_119 = mux(_T_118, UInt<1>("h0"), UInt<1>("h1")) @[Controller.scala 228:28]
    io.vector_WBSel <= _T_119 @[Controller.scala 228:22]

  module PC :
    input clock : Clock
    input reset : Reset
    output io : { flip Hcf : UInt<1>, flip PCSel : UInt<1>, flip alu_out : UInt<32>, pc : UInt<15>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[PC.scala 14:24]
    node _T = eq(io.Hcf, UInt<1>("h0")) @[PC.scala 16:10]
    when _T : @[PC.scala 16:18]
      node _T_1 = not(UInt<32>("h3")) @[PC.scala 17:45]
      node _T_2 = and(io.alu_out, _T_1) @[PC.scala 17:43]
      node _T_3 = add(pcReg, UInt<3>("h4")) @[PC.scala 17:67]
      node _T_4 = tail(_T_3, 1) @[PC.scala 17:67]
      node _T_5 = mux(io.PCSel, _T_2, _T_4) @[PC.scala 17:21]
      pcReg <= _T_5 @[PC.scala 17:15]
    else :
      pcReg <= pcReg @[PC.scala 19:15]
    io.pc <= pcReg @[PC.scala 23:11]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst_31_7 : UInt<25>, flip ImmSel : UInt<3>, imm : UInt<32>}

    wire inst_shift : UInt<32> @[ImmGen.scala 25:26]
    node _T = cat(io.inst_31_7, UInt<7>("h0")) @[Cat.scala 30:58]
    inst_shift <= _T @[ImmGen.scala 26:16]
    wire simm : SInt<32> @[ImmGen.scala 28:20]
    node _T_1 = bits(inst_shift, 31, 20) @[ImmGen.scala 35:24]
    node _T_2 = asSInt(_T_1) @[ImmGen.scala 35:32]
    node _T_3 = bits(inst_shift, 31, 31) @[ImmGen.scala 38:28]
    node _T_4 = bits(inst_shift, 7, 7) @[ImmGen.scala 39:28]
    node _T_5 = bits(inst_shift, 30, 25) @[ImmGen.scala 40:28]
    node _T_6 = bits(inst_shift, 11, 8) @[ImmGen.scala 41:28]
    node lo = cat(_T_6, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi = cat(_T_3, _T_4) @[Cat.scala 30:58]
    node hi = cat(hi_hi, _T_5) @[Cat.scala 30:58]
    node _T_7 = cat(hi, lo) @[Cat.scala 30:58]
    node _T_8 = asSInt(_T_7) @[ImmGen.scala 42:28]
    node _T_9 = bits(inst_shift, 31, 31) @[ImmGen.scala 45:28]
    node _T_10 = bits(inst_shift, 30, 25) @[ImmGen.scala 46:27]
    node _T_11 = bits(inst_shift, 11, 8) @[ImmGen.scala 47:27]
    node _T_12 = bits(inst_shift, 7, 7) @[ImmGen.scala 48:27]
    node lo_1 = cat(_T_11, _T_12) @[Cat.scala 30:58]
    node hi_1 = cat(_T_9, _T_10) @[Cat.scala 30:58]
    node _T_13 = cat(hi_1, lo_1) @[Cat.scala 30:58]
    node _T_14 = asSInt(_T_13) @[ImmGen.scala 48:32]
    node _T_15 = bits(inst_shift, 31, 12) @[ImmGen.scala 51:28]
    node _T_16 = cat(_T_15, UInt<12>("h0")) @[Cat.scala 30:58]
    node _T_17 = asSInt(_T_16) @[ImmGen.scala 51:47]
    node _T_18 = bits(inst_shift, 31, 31) @[ImmGen.scala 54:28]
    node _T_19 = bits(inst_shift, 19, 12) @[ImmGen.scala 55:28]
    node _T_20 = bits(inst_shift, 20, 20) @[ImmGen.scala 56:28]
    node _T_21 = bits(inst_shift, 30, 21) @[ImmGen.scala 57:28]
    node lo_2 = cat(_T_21, UInt<1>("h0")) @[Cat.scala 30:58]
    node hi_hi_1 = cat(_T_18, _T_19) @[Cat.scala 30:58]
    node hi_2 = cat(hi_hi_1, _T_20) @[Cat.scala 30:58]
    node _T_22 = cat(hi_2, lo_2) @[Cat.scala 30:58]
    node _T_23 = asSInt(_T_22) @[ImmGen.scala 58:28]
    node _T_24 = bits(inst_shift, 24, 20) @[ImmGen.scala 61:24]
    node _T_25 = asSInt(_T_24) @[ImmGen.scala 61:32]
    node _T_26 = eq(UInt<1>("h0"), io.ImmSel) @[Mux.scala 80:60]
    node _T_27 = mux(_T_26, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[Mux.scala 80:57]
    node _T_28 = eq(UInt<1>("h1"), io.ImmSel) @[Mux.scala 80:60]
    node _T_29 = mux(_T_28, _T_2, _T_27) @[Mux.scala 80:57]
    node _T_30 = eq(UInt<2>("h3"), io.ImmSel) @[Mux.scala 80:60]
    node _T_31 = mux(_T_30, _T_8, _T_29) @[Mux.scala 80:57]
    node _T_32 = eq(UInt<2>("h2"), io.ImmSel) @[Mux.scala 80:60]
    node _T_33 = mux(_T_32, _T_14, _T_31) @[Mux.scala 80:57]
    node _T_34 = eq(UInt<3>("h5"), io.ImmSel) @[Mux.scala 80:60]
    node _T_35 = mux(_T_34, _T_17, _T_33) @[Mux.scala 80:57]
    node _T_36 = eq(UInt<3>("h4"), io.ImmSel) @[Mux.scala 80:60]
    node _T_37 = mux(_T_36, _T_23, _T_35) @[Mux.scala 80:57]
    node _T_38 = eq(UInt<3>("h6"), io.ImmSel) @[Mux.scala 80:60]
    node _T_39 = mux(_T_38, _T_25, _T_37) @[Mux.scala 80:57]
    simm <= _T_39 @[ImmGen.scala 30:10]
    node _T_40 = asUInt(simm) @[ImmGen.scala 65:20]
    io.imm <= _T_40 @[ImmGen.scala 65:12]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>, flip raddr : UInt<5>[2], rdata : UInt<32>[2], regs : UInt<32>[32]}

    wire _WIRE : UInt<32>[32] @[RegFile.scala 16:29]
    _WIRE[0] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[1] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[2] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[3] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[4] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[5] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[6] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[7] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[8] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[9] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[10] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[11] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[12] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[13] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[14] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[15] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[16] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[17] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[18] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[19] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[20] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[21] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[22] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[23] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[24] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[25] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[26] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[27] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[28] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[29] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[30] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _WIRE[31] <= UInt<32>("h0") @[RegFile.scala 16:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _WIRE) @[RegFile.scala 16:21]
    io.rdata[0] <= regs[io.raddr[0]] @[RegFile.scala 22:52]
    io.rdata[1] <= regs[io.raddr[1]] @[RegFile.scala 22:52]
    when io.wen : @[RegFile.scala 23:16]
      regs[io.waddr] <= io.wdata @[RegFile.scala 23:32]
    regs[0] <= UInt<1>("h0") @[RegFile.scala 24:11]
    io.regs[0] <= regs[0] @[RegFile.scala 26:11]
    io.regs[1] <= regs[1] @[RegFile.scala 26:11]
    io.regs[2] <= regs[2] @[RegFile.scala 26:11]
    io.regs[3] <= regs[3] @[RegFile.scala 26:11]
    io.regs[4] <= regs[4] @[RegFile.scala 26:11]
    io.regs[5] <= regs[5] @[RegFile.scala 26:11]
    io.regs[6] <= regs[6] @[RegFile.scala 26:11]
    io.regs[7] <= regs[7] @[RegFile.scala 26:11]
    io.regs[8] <= regs[8] @[RegFile.scala 26:11]
    io.regs[9] <= regs[9] @[RegFile.scala 26:11]
    io.regs[10] <= regs[10] @[RegFile.scala 26:11]
    io.regs[11] <= regs[11] @[RegFile.scala 26:11]
    io.regs[12] <= regs[12] @[RegFile.scala 26:11]
    io.regs[13] <= regs[13] @[RegFile.scala 26:11]
    io.regs[14] <= regs[14] @[RegFile.scala 26:11]
    io.regs[15] <= regs[15] @[RegFile.scala 26:11]
    io.regs[16] <= regs[16] @[RegFile.scala 26:11]
    io.regs[17] <= regs[17] @[RegFile.scala 26:11]
    io.regs[18] <= regs[18] @[RegFile.scala 26:11]
    io.regs[19] <= regs[19] @[RegFile.scala 26:11]
    io.regs[20] <= regs[20] @[RegFile.scala 26:11]
    io.regs[21] <= regs[21] @[RegFile.scala 26:11]
    io.regs[22] <= regs[22] @[RegFile.scala 26:11]
    io.regs[23] <= regs[23] @[RegFile.scala 26:11]
    io.regs[24] <= regs[24] @[RegFile.scala 26:11]
    io.regs[25] <= regs[25] @[RegFile.scala 26:11]
    io.regs[26] <= regs[26] @[RegFile.scala 26:11]
    io.regs[27] <= regs[27] @[RegFile.scala 26:11]
    io.regs[28] <= regs[28] @[RegFile.scala 26:11]
    io.regs[29] <= regs[29] @[RegFile.scala 26:11]
    io.regs[30] <= regs[30] @[RegFile.scala 26:11]
    io.regs[31] <= regs[31] @[RegFile.scala 26:11]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<32>, flip src2 : UInt<32>, flip ALUSel : UInt<4>, out : UInt<32>}

    io.out <= UInt<1>("h0") @[ALU.scala 20:10]
    node _T = eq(UInt<1>("h0"), io.ALUSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.src1, io.src2) @[ALU.scala 22:31]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 22:31]
      io.out <= _T_2 @[ALU.scala 22:21]
    else :
      node _T_3 = eq(UInt<1>("h1"), io.ALUSel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = bits(io.src2, 4, 0) @[ALU.scala 23:42]
        node _T_5 = dshl(io.src1, _T_4) @[ALU.scala 23:32]
        io.out <= _T_5 @[ALU.scala 23:21]
      else :
        node _T_6 = eq(UInt<2>("h2"), io.ALUSel) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _T_7 = asSInt(io.src1) @[ALU.scala 24:36]
          node _T_8 = asSInt(io.src2) @[ALU.scala 24:51]
          node _T_9 = lt(_T_7, _T_8) @[ALU.scala 24:42]
          node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 24:27]
          io.out <= _T_10 @[ALU.scala 24:21]
        else :
          node _T_11 = eq(UInt<2>("h3"), io.ALUSel) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            node _T_12 = lt(io.src1, io.src2) @[ALU.scala 25:35]
            node _T_13 = mux(_T_12, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 25:27]
            io.out <= _T_13 @[ALU.scala 25:21]
          else :
            node _T_14 = eq(UInt<3>("h4"), io.ALUSel) @[Conditional.scala 37:30]
            when _T_14 : @[Conditional.scala 39:67]
              node _T_15 = xor(io.src1, io.src2) @[ALU.scala 26:31]
              io.out <= _T_15 @[ALU.scala 26:21]
            else :
              node _T_16 = eq(UInt<3>("h5"), io.ALUSel) @[Conditional.scala 37:30]
              when _T_16 : @[Conditional.scala 39:67]
                node _T_17 = bits(io.src2, 4, 0) @[ALU.scala 27:42]
                node _T_18 = dshr(io.src1, _T_17) @[ALU.scala 27:32]
                io.out <= _T_18 @[ALU.scala 27:21]
              else :
                node _T_19 = eq(UInt<3>("h6"), io.ALUSel) @[Conditional.scala 37:30]
                when _T_19 : @[Conditional.scala 39:67]
                  node _T_20 = or(io.src1, io.src2) @[ALU.scala 28:31]
                  io.out <= _T_20 @[ALU.scala 28:21]
                else :
                  node _T_21 = eq(UInt<3>("h7"), io.ALUSel) @[Conditional.scala 37:30]
                  when _T_21 : @[Conditional.scala 39:67]
                    node _T_22 = and(io.src1, io.src2) @[ALU.scala 29:31]
                    io.out <= _T_22 @[ALU.scala 29:21]
                  else :
                    node _T_23 = eq(UInt<4>("h8"), io.ALUSel) @[Conditional.scala 37:30]
                    when _T_23 : @[Conditional.scala 39:67]
                      node _T_24 = sub(io.src1, io.src2) @[ALU.scala 30:31]
                      node _T_25 = tail(_T_24, 1) @[ALU.scala 30:31]
                      io.out <= _T_25 @[ALU.scala 30:21]
                    else :
                      node _T_26 = eq(UInt<4>("hd"), io.ALUSel) @[Conditional.scala 37:30]
                      when _T_26 : @[Conditional.scala 39:67]
                        node _T_27 = asSInt(io.src1) @[ALU.scala 31:33]
                        node _T_28 = bits(io.src2, 4, 0) @[ALU.scala 31:50]
                        node _T_29 = dshr(_T_27, _T_28) @[ALU.scala 31:40]
                        node _T_30 = asUInt(_T_29) @[ALU.scala 31:57]
                        io.out <= _T_30 @[ALU.scala 31:21]
                      else :
                        node _T_31 = eq(UInt<4>("h9"), io.ALUSel) @[Conditional.scala 37:30]
                        when _T_31 : @[Conditional.scala 39:67]
                          node _T_32 = mul(io.src1, io.src2) @[ALU.scala 32:31]
                          io.out <= _T_32 @[ALU.scala 32:21]
                        else :
                          node _T_33 = eq(UInt<4>("ha"), io.ALUSel) @[Conditional.scala 37:30]
                          when _T_33 : @[Conditional.scala 39:67]
                            node _T_34 = eq(io.src2, UInt<1>("h0")) @[ALU.scala 33:35]
                            node _T_35 = div(io.src1, io.src2) @[ALU.scala 33:53]
                            node _T_36 = mux(_T_34, UInt<1>("h0"), _T_35) @[ALU.scala 33:27]
                            io.out <= _T_36 @[ALU.scala 33:21]

  module BranchComp :
    input clock : Clock
    input reset : Reset
    output io : { flip BrUn : UInt<1>, flip src1 : UInt<32>, flip src2 : UInt<32>, BrEq : UInt<1>, BrLT : UInt<1>}

    wire eq : UInt<1>
    eq <= UInt<1>("h0")
    wire lt : UInt<1>
    lt <= UInt<1>("h0")
    when io.BrUn : @[BranchComp.scala 19:18]
      node _T = lt(io.src1, io.src2) @[BranchComp.scala 20:20]
      when _T : @[BranchComp.scala 20:31]
        lt <= UInt<1>("h1") @[BranchComp.scala 20:36]
    else :
      node _T_1 = asSInt(io.src1) @[BranchComp.scala 22:20]
      node _T_2 = asSInt(io.src2) @[BranchComp.scala 22:37]
      node _T_3 = lt(_T_1, _T_2) @[BranchComp.scala 22:27]
      when _T_3 : @[BranchComp.scala 22:45]
        lt <= UInt<1>("h1") @[BranchComp.scala 22:50]
    node _T_4 = eq(io.src1, io.src2) @[BranchComp.scala 25:22]
    node _T_5 = mux(_T_4, UInt<1>("h1"), UInt<1>("h0")) @[BranchComp.scala 25:14]
    eq <= _T_5 @[BranchComp.scala 25:8]
    io.BrEq <= eq @[BranchComp.scala 27:13]
    io.BrLT <= lt @[BranchComp.scala 28:13]

  module Vector_RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip vector_wen : UInt<1>, flip vector_waddr : UInt<5>, flip vector_wdata : UInt<64>, flip vector_raddr : UInt<5>[3], vector_rdata : UInt<64>[3], vector_regs : UInt<64>[32]}

    wire _WIRE : UInt<64>[32] @[Vector_RegFile.scala 24:36]
    _WIRE[0] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[1] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[2] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[3] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[4] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[5] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[6] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[7] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[8] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[9] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[10] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[11] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[12] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[13] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[14] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[15] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[16] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[17] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[18] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[19] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[20] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[21] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[22] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[23] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[24] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[25] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[26] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[27] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[28] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[29] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[30] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    _WIRE[31] <= UInt<64>("h0") @[Vector_RegFile.scala 24:36]
    reg vector_regs : UInt<64>[32], clock with :
      reset => (reset, _WIRE) @[Vector_RegFile.scala 24:28]
    io.vector_rdata[0] <= vector_regs[io.vector_raddr[0]] @[Vector_RegFile.scala 28:67]
    io.vector_rdata[1] <= vector_regs[io.vector_raddr[1]] @[Vector_RegFile.scala 28:67]
    io.vector_rdata[2] <= vector_regs[io.vector_raddr[2]] @[Vector_RegFile.scala 28:67]
    when io.vector_wen : @[Vector_RegFile.scala 31:23]
      vector_regs[io.vector_waddr] <= io.vector_wdata @[Vector_RegFile.scala 31:53]
    io.vector_regs[0] <= vector_regs[0] @[Vector_RegFile.scala 35:18]
    io.vector_regs[1] <= vector_regs[1] @[Vector_RegFile.scala 35:18]
    io.vector_regs[2] <= vector_regs[2] @[Vector_RegFile.scala 35:18]
    io.vector_regs[3] <= vector_regs[3] @[Vector_RegFile.scala 35:18]
    io.vector_regs[4] <= vector_regs[4] @[Vector_RegFile.scala 35:18]
    io.vector_regs[5] <= vector_regs[5] @[Vector_RegFile.scala 35:18]
    io.vector_regs[6] <= vector_regs[6] @[Vector_RegFile.scala 35:18]
    io.vector_regs[7] <= vector_regs[7] @[Vector_RegFile.scala 35:18]
    io.vector_regs[8] <= vector_regs[8] @[Vector_RegFile.scala 35:18]
    io.vector_regs[9] <= vector_regs[9] @[Vector_RegFile.scala 35:18]
    io.vector_regs[10] <= vector_regs[10] @[Vector_RegFile.scala 35:18]
    io.vector_regs[11] <= vector_regs[11] @[Vector_RegFile.scala 35:18]
    io.vector_regs[12] <= vector_regs[12] @[Vector_RegFile.scala 35:18]
    io.vector_regs[13] <= vector_regs[13] @[Vector_RegFile.scala 35:18]
    io.vector_regs[14] <= vector_regs[14] @[Vector_RegFile.scala 35:18]
    io.vector_regs[15] <= vector_regs[15] @[Vector_RegFile.scala 35:18]
    io.vector_regs[16] <= vector_regs[16] @[Vector_RegFile.scala 35:18]
    io.vector_regs[17] <= vector_regs[17] @[Vector_RegFile.scala 35:18]
    io.vector_regs[18] <= vector_regs[18] @[Vector_RegFile.scala 35:18]
    io.vector_regs[19] <= vector_regs[19] @[Vector_RegFile.scala 35:18]
    io.vector_regs[20] <= vector_regs[20] @[Vector_RegFile.scala 35:18]
    io.vector_regs[21] <= vector_regs[21] @[Vector_RegFile.scala 35:18]
    io.vector_regs[22] <= vector_regs[22] @[Vector_RegFile.scala 35:18]
    io.vector_regs[23] <= vector_regs[23] @[Vector_RegFile.scala 35:18]
    io.vector_regs[24] <= vector_regs[24] @[Vector_RegFile.scala 35:18]
    io.vector_regs[25] <= vector_regs[25] @[Vector_RegFile.scala 35:18]
    io.vector_regs[26] <= vector_regs[26] @[Vector_RegFile.scala 35:18]
    io.vector_regs[27] <= vector_regs[27] @[Vector_RegFile.scala 35:18]
    io.vector_regs[28] <= vector_regs[28] @[Vector_RegFile.scala 35:18]
    io.vector_regs[29] <= vector_regs[29] @[Vector_RegFile.scala 35:18]
    io.vector_regs[30] <= vector_regs[30] @[Vector_RegFile.scala 35:18]
    io.vector_regs[31] <= vector_regs[31] @[Vector_RegFile.scala 35:18]

  module Vector_ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip vector_src1 : UInt<64>, flip vector_src2 : UInt<64>, flip vector_ALUSel : UInt<4>, vector_out : UInt<64>}

    wire wire_set : UInt<8>[8] @[Vector_ALU.scala 27:22]
    wire_set[0] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[1] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[2] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[3] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[4] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[5] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[6] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    wire_set[7] <= UInt<1>("h0") @[Vector_ALU.scala 31:10]
    node _T = eq(UInt<1>("h0"), io.vector_ALUSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      wire _WIRE : UInt<8>[8] @[Vector_ALU.scala 50:46]
      wire _WIRE_1 : UInt<64>
      _WIRE_1 <= io.vector_src1
      node _T_1 = bits(_WIRE_1, 7, 0) @[Vector_ALU.scala 50:46]
      _WIRE[0] <= _T_1 @[Vector_ALU.scala 50:46]
      node _T_2 = bits(_WIRE_1, 15, 8) @[Vector_ALU.scala 50:46]
      _WIRE[1] <= _T_2 @[Vector_ALU.scala 50:46]
      node _T_3 = bits(_WIRE_1, 23, 16) @[Vector_ALU.scala 50:46]
      _WIRE[2] <= _T_3 @[Vector_ALU.scala 50:46]
      node _T_4 = bits(_WIRE_1, 31, 24) @[Vector_ALU.scala 50:46]
      _WIRE[3] <= _T_4 @[Vector_ALU.scala 50:46]
      node _T_5 = bits(_WIRE_1, 39, 32) @[Vector_ALU.scala 50:46]
      _WIRE[4] <= _T_5 @[Vector_ALU.scala 50:46]
      node _T_6 = bits(_WIRE_1, 47, 40) @[Vector_ALU.scala 50:46]
      _WIRE[5] <= _T_6 @[Vector_ALU.scala 50:46]
      node _T_7 = bits(_WIRE_1, 55, 48) @[Vector_ALU.scala 50:46]
      _WIRE[6] <= _T_7 @[Vector_ALU.scala 50:46]
      node _T_8 = bits(_WIRE_1, 63, 56) @[Vector_ALU.scala 50:46]
      _WIRE[7] <= _T_8 @[Vector_ALU.scala 50:46]
      wire _WIRE_2 : UInt<8>[8] @[Vector_ALU.scala 51:46]
      wire _WIRE_3 : UInt<64>
      _WIRE_3 <= io.vector_src2
      node _T_9 = bits(_WIRE_3, 7, 0) @[Vector_ALU.scala 51:46]
      _WIRE_2[0] <= _T_9 @[Vector_ALU.scala 51:46]
      node _T_10 = bits(_WIRE_3, 15, 8) @[Vector_ALU.scala 51:46]
      _WIRE_2[1] <= _T_10 @[Vector_ALU.scala 51:46]
      node _T_11 = bits(_WIRE_3, 23, 16) @[Vector_ALU.scala 51:46]
      _WIRE_2[2] <= _T_11 @[Vector_ALU.scala 51:46]
      node _T_12 = bits(_WIRE_3, 31, 24) @[Vector_ALU.scala 51:46]
      _WIRE_2[3] <= _T_12 @[Vector_ALU.scala 51:46]
      node _T_13 = bits(_WIRE_3, 39, 32) @[Vector_ALU.scala 51:46]
      _WIRE_2[4] <= _T_13 @[Vector_ALU.scala 51:46]
      node _T_14 = bits(_WIRE_3, 47, 40) @[Vector_ALU.scala 51:46]
      _WIRE_2[5] <= _T_14 @[Vector_ALU.scala 51:46]
      node _T_15 = bits(_WIRE_3, 55, 48) @[Vector_ALU.scala 51:46]
      _WIRE_2[6] <= _T_15 @[Vector_ALU.scala 51:46]
      node _T_16 = bits(_WIRE_3, 63, 56) @[Vector_ALU.scala 51:46]
      _WIRE_2[7] <= _T_16 @[Vector_ALU.scala 51:46]
      node _T_17 = add(_WIRE[0], _WIRE_2[0]) @[Vector_ALU.scala 55:24]
      node _T_18 = tail(_T_17, 1) @[Vector_ALU.scala 55:24]
      wire_set[0] <= _T_18 @[Vector_ALU.scala 55:16]
      node _T_19 = add(_WIRE[1], _WIRE_2[1]) @[Vector_ALU.scala 55:24]
      node _T_20 = tail(_T_19, 1) @[Vector_ALU.scala 55:24]
      wire_set[1] <= _T_20 @[Vector_ALU.scala 55:16]
      node _T_21 = add(_WIRE[2], _WIRE_2[2]) @[Vector_ALU.scala 55:24]
      node _T_22 = tail(_T_21, 1) @[Vector_ALU.scala 55:24]
      wire_set[2] <= _T_22 @[Vector_ALU.scala 55:16]
      node _T_23 = add(_WIRE[3], _WIRE_2[3]) @[Vector_ALU.scala 55:24]
      node _T_24 = tail(_T_23, 1) @[Vector_ALU.scala 55:24]
      wire_set[3] <= _T_24 @[Vector_ALU.scala 55:16]
      node _T_25 = add(_WIRE[4], _WIRE_2[4]) @[Vector_ALU.scala 55:24]
      node _T_26 = tail(_T_25, 1) @[Vector_ALU.scala 55:24]
      wire_set[4] <= _T_26 @[Vector_ALU.scala 55:16]
      node _T_27 = add(_WIRE[5], _WIRE_2[5]) @[Vector_ALU.scala 55:24]
      node _T_28 = tail(_T_27, 1) @[Vector_ALU.scala 55:24]
      wire_set[5] <= _T_28 @[Vector_ALU.scala 55:16]
      node _T_29 = add(_WIRE[6], _WIRE_2[6]) @[Vector_ALU.scala 55:24]
      node _T_30 = tail(_T_29, 1) @[Vector_ALU.scala 55:24]
      wire_set[6] <= _T_30 @[Vector_ALU.scala 55:16]
      node _T_31 = add(_WIRE[7], _WIRE_2[7]) @[Vector_ALU.scala 55:24]
      node _T_32 = tail(_T_31, 1) @[Vector_ALU.scala 55:24]
      wire_set[7] <= _T_32 @[Vector_ALU.scala 55:16]
    else :
      node _T_33 = eq(UInt<1>("h1"), io.vector_ALUSel) @[Conditional.scala 37:30]
      when _T_33 : @[Conditional.scala 39:67]
        wire _WIRE_4 : UInt<8>[8] @[Vector_ALU.scala 59:46]
        wire _WIRE_5 : UInt<64>
        _WIRE_5 <= io.vector_src1
        node _T_34 = bits(_WIRE_5, 7, 0) @[Vector_ALU.scala 59:46]
        _WIRE_4[0] <= _T_34 @[Vector_ALU.scala 59:46]
        node _T_35 = bits(_WIRE_5, 15, 8) @[Vector_ALU.scala 59:46]
        _WIRE_4[1] <= _T_35 @[Vector_ALU.scala 59:46]
        node _T_36 = bits(_WIRE_5, 23, 16) @[Vector_ALU.scala 59:46]
        _WIRE_4[2] <= _T_36 @[Vector_ALU.scala 59:46]
        node _T_37 = bits(_WIRE_5, 31, 24) @[Vector_ALU.scala 59:46]
        _WIRE_4[3] <= _T_37 @[Vector_ALU.scala 59:46]
        node _T_38 = bits(_WIRE_5, 39, 32) @[Vector_ALU.scala 59:46]
        _WIRE_4[4] <= _T_38 @[Vector_ALU.scala 59:46]
        node _T_39 = bits(_WIRE_5, 47, 40) @[Vector_ALU.scala 59:46]
        _WIRE_4[5] <= _T_39 @[Vector_ALU.scala 59:46]
        node _T_40 = bits(_WIRE_5, 55, 48) @[Vector_ALU.scala 59:46]
        _WIRE_4[6] <= _T_40 @[Vector_ALU.scala 59:46]
        node _T_41 = bits(_WIRE_5, 63, 56) @[Vector_ALU.scala 59:46]
        _WIRE_4[7] <= _T_41 @[Vector_ALU.scala 59:46]
        wire _WIRE_6 : UInt<8>[8] @[Vector_ALU.scala 60:46]
        wire _WIRE_7 : UInt<64>
        _WIRE_7 <= io.vector_src2
        node _T_42 = bits(_WIRE_7, 7, 0) @[Vector_ALU.scala 60:46]
        _WIRE_6[0] <= _T_42 @[Vector_ALU.scala 60:46]
        node _T_43 = bits(_WIRE_7, 15, 8) @[Vector_ALU.scala 60:46]
        _WIRE_6[1] <= _T_43 @[Vector_ALU.scala 60:46]
        node _T_44 = bits(_WIRE_7, 23, 16) @[Vector_ALU.scala 60:46]
        _WIRE_6[2] <= _T_44 @[Vector_ALU.scala 60:46]
        node _T_45 = bits(_WIRE_7, 31, 24) @[Vector_ALU.scala 60:46]
        _WIRE_6[3] <= _T_45 @[Vector_ALU.scala 60:46]
        node _T_46 = bits(_WIRE_7, 39, 32) @[Vector_ALU.scala 60:46]
        _WIRE_6[4] <= _T_46 @[Vector_ALU.scala 60:46]
        node _T_47 = bits(_WIRE_7, 47, 40) @[Vector_ALU.scala 60:46]
        _WIRE_6[5] <= _T_47 @[Vector_ALU.scala 60:46]
        node _T_48 = bits(_WIRE_7, 55, 48) @[Vector_ALU.scala 60:46]
        _WIRE_6[6] <= _T_48 @[Vector_ALU.scala 60:46]
        node _T_49 = bits(_WIRE_7, 63, 56) @[Vector_ALU.scala 60:46]
        _WIRE_6[7] <= _T_49 @[Vector_ALU.scala 60:46]
        node _T_50 = mul(_WIRE_4[0], _WIRE_6[0]) @[Vector_ALU.scala 64:24]
        wire_set[0] <= _T_50 @[Vector_ALU.scala 64:16]
        node _T_51 = mul(_WIRE_4[1], _WIRE_6[1]) @[Vector_ALU.scala 64:24]
        wire_set[1] <= _T_51 @[Vector_ALU.scala 64:16]
        node _T_52 = mul(_WIRE_4[2], _WIRE_6[2]) @[Vector_ALU.scala 64:24]
        wire_set[2] <= _T_52 @[Vector_ALU.scala 64:16]
        node _T_53 = mul(_WIRE_4[3], _WIRE_6[3]) @[Vector_ALU.scala 64:24]
        wire_set[3] <= _T_53 @[Vector_ALU.scala 64:16]
        node _T_54 = mul(_WIRE_4[4], _WIRE_6[4]) @[Vector_ALU.scala 64:24]
        wire_set[4] <= _T_54 @[Vector_ALU.scala 64:16]
        node _T_55 = mul(_WIRE_4[5], _WIRE_6[5]) @[Vector_ALU.scala 64:24]
        wire_set[5] <= _T_55 @[Vector_ALU.scala 64:16]
        node _T_56 = mul(_WIRE_4[6], _WIRE_6[6]) @[Vector_ALU.scala 64:24]
        wire_set[6] <= _T_56 @[Vector_ALU.scala 64:16]
        node _T_57 = mul(_WIRE_4[7], _WIRE_6[7]) @[Vector_ALU.scala 64:24]
        wire_set[7] <= _T_57 @[Vector_ALU.scala 64:16]
      else :
        node _T_58 = eq(UInt<3>("h4"), io.vector_ALUSel) @[Conditional.scala 37:30]
        when _T_58 : @[Conditional.scala 39:67]
          wire _WIRE_8 : UInt<8>[8] @[Vector_ALU.scala 68:30]
          _WIRE_8[0] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[1] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[2] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[3] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[4] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[5] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[6] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          _WIRE_8[7] <= UInt<8>("h0") @[Vector_ALU.scala 68:30]
          wire _WIRE_9 : UInt<8>[8] @[Vector_ALU.scala 69:46]
          wire _WIRE_10 : UInt<64>
          _WIRE_10 <= io.vector_src2
          node _T_59 = bits(_WIRE_10, 7, 0) @[Vector_ALU.scala 69:46]
          _WIRE_9[0] <= _T_59 @[Vector_ALU.scala 69:46]
          node _T_60 = bits(_WIRE_10, 15, 8) @[Vector_ALU.scala 69:46]
          _WIRE_9[1] <= _T_60 @[Vector_ALU.scala 69:46]
          node _T_61 = bits(_WIRE_10, 23, 16) @[Vector_ALU.scala 69:46]
          _WIRE_9[2] <= _T_61 @[Vector_ALU.scala 69:46]
          node _T_62 = bits(_WIRE_10, 31, 24) @[Vector_ALU.scala 69:46]
          _WIRE_9[3] <= _T_62 @[Vector_ALU.scala 69:46]
          node _T_63 = bits(_WIRE_10, 39, 32) @[Vector_ALU.scala 69:46]
          _WIRE_9[4] <= _T_63 @[Vector_ALU.scala 69:46]
          node _T_64 = bits(_WIRE_10, 47, 40) @[Vector_ALU.scala 69:46]
          _WIRE_9[5] <= _T_64 @[Vector_ALU.scala 69:46]
          node _T_65 = bits(_WIRE_10, 55, 48) @[Vector_ALU.scala 69:46]
          _WIRE_9[6] <= _T_65 @[Vector_ALU.scala 69:46]
          node _T_66 = bits(_WIRE_10, 63, 56) @[Vector_ALU.scala 69:46]
          _WIRE_9[7] <= _T_66 @[Vector_ALU.scala 69:46]
          node _T_67 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[0] <= _T_67 @[Vector_ALU.scala 72:22]
          node _T_68 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[1] <= _T_68 @[Vector_ALU.scala 72:22]
          node _T_69 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[2] <= _T_69 @[Vector_ALU.scala 72:22]
          node _T_70 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[3] <= _T_70 @[Vector_ALU.scala 72:22]
          node _T_71 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[4] <= _T_71 @[Vector_ALU.scala 72:22]
          node _T_72 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[5] <= _T_72 @[Vector_ALU.scala 72:22]
          node _T_73 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[6] <= _T_73 @[Vector_ALU.scala 72:22]
          node _T_74 = bits(io.vector_src1, 7, 0) @[Vector_ALU.scala 72:39]
          _WIRE_8[7] <= _T_74 @[Vector_ALU.scala 72:22]
          node _T_75 = mul(_WIRE_8[0], _WIRE_9[0]) @[Vector_ALU.scala 77:24]
          wire_set[0] <= _T_75 @[Vector_ALU.scala 77:16]
          node _T_76 = mul(_WIRE_8[1], _WIRE_9[1]) @[Vector_ALU.scala 77:24]
          wire_set[1] <= _T_76 @[Vector_ALU.scala 77:16]
          node _T_77 = mul(_WIRE_8[2], _WIRE_9[2]) @[Vector_ALU.scala 77:24]
          wire_set[2] <= _T_77 @[Vector_ALU.scala 77:16]
          node _T_78 = mul(_WIRE_8[3], _WIRE_9[3]) @[Vector_ALU.scala 77:24]
          wire_set[3] <= _T_78 @[Vector_ALU.scala 77:16]
          node _T_79 = mul(_WIRE_8[4], _WIRE_9[4]) @[Vector_ALU.scala 77:24]
          wire_set[4] <= _T_79 @[Vector_ALU.scala 77:16]
          node _T_80 = mul(_WIRE_8[5], _WIRE_9[5]) @[Vector_ALU.scala 77:24]
          wire_set[5] <= _T_80 @[Vector_ALU.scala 77:16]
          node _T_81 = mul(_WIRE_8[6], _WIRE_9[6]) @[Vector_ALU.scala 77:24]
          wire_set[6] <= _T_81 @[Vector_ALU.scala 77:16]
          node _T_82 = mul(_WIRE_8[7], _WIRE_9[7]) @[Vector_ALU.scala 77:24]
          wire_set[7] <= _T_82 @[Vector_ALU.scala 77:16]
    node lo_lo = cat(wire_set[1], wire_set[0]) @[Vector_ALU.scala 86:29]
    node lo_hi = cat(wire_set[3], wire_set[2]) @[Vector_ALU.scala 86:29]
    node lo = cat(lo_hi, lo_lo) @[Vector_ALU.scala 86:29]
    node hi_lo = cat(wire_set[5], wire_set[4]) @[Vector_ALU.scala 86:29]
    node hi_hi = cat(wire_set[7], wire_set[6]) @[Vector_ALU.scala 86:29]
    node hi = cat(hi_hi, hi_lo) @[Vector_ALU.scala 86:29]
    node _T_83 = cat(hi, lo) @[Vector_ALU.scala 86:29]
    io.vector_out <= _T_83 @[Vector_ALU.scala 86:17]

  module Single_Cycle :
    input clock : Clock
    input reset : Reset
    output io : { pc : UInt<15>, flip rinst : UInt<32>, raddr : UInt<15>, flip rdata : UInt<32>, wdata : UInt<32>, waddr : UInt<15>, MemRW : UInt<3>, funct3 : UInt<3>, flip vrdata : UInt<64>, vwdata : UInt<64>, regs : UInt<32>[32], Hcf : UInt<1>, vector_regs : UInt<64>[32]}

    inst ct of Controller @[Single_cycle.scala 38:20]
    ct.clock <= clock
    ct.reset <= reset
    inst pc of PC @[Single_cycle.scala 39:20]
    pc.clock <= clock
    pc.reset <= reset
    inst ig of ImmGen @[Single_cycle.scala 40:20]
    ig.clock <= clock
    ig.reset <= reset
    inst rf of RegFile @[Single_cycle.scala 41:20]
    rf.clock <= clock
    rf.reset <= reset
    inst alu of ALU @[Single_cycle.scala 42:21]
    alu.clock <= clock
    alu.reset <= reset
    inst bc of BranchComp @[Single_cycle.scala 43:20]
    bc.clock <= clock
    bc.reset <= reset
    wire rd : UInt<5> @[Single_cycle.scala 46:25]
    wire rs1 : UInt<5> @[Single_cycle.scala 47:25]
    wire rs2 : UInt<5> @[Single_cycle.scala 48:25]
    wire funct3 : UInt<3> @[Single_cycle.scala 49:25]
    wire inst_31_7 : UInt<25> @[Single_cycle.scala 50:25]
    node _T = bits(io.rinst, 11, 7) @[Single_cycle.scala 52:20]
    rd <= _T @[Single_cycle.scala 52:9]
    node _T_1 = bits(io.rinst, 19, 15) @[Single_cycle.scala 53:20]
    rs1 <= _T_1 @[Single_cycle.scala 53:9]
    node _T_2 = bits(io.rinst, 24, 20) @[Single_cycle.scala 54:20]
    rs2 <= _T_2 @[Single_cycle.scala 54:9]
    node _T_3 = bits(io.rinst, 14, 12) @[Single_cycle.scala 55:23]
    funct3 <= _T_3 @[Single_cycle.scala 55:12]
    node _T_4 = bits(io.rinst, 31, 7) @[Single_cycle.scala 56:26]
    inst_31_7 <= _T_4 @[Single_cycle.scala 56:15]
    pc.io.PCSel <= ct.io.PCSel @[Single_cycle.scala 59:17]
    pc.io.alu_out <= alu.io.out @[Single_cycle.scala 60:19]
    pc.io.Hcf <= ct.io.Hcf @[Single_cycle.scala 61:15]
    io.pc <= pc.io.pc @[Single_cycle.scala 64:11]
    ig.io.ImmSel <= ct.io.ImmSel @[Single_cycle.scala 67:18]
    ig.io.inst_31_7 <= inst_31_7 @[Single_cycle.scala 68:21]
    rf.io.raddr[0] <= rs1 @[Single_cycle.scala 71:20]
    rf.io.raddr[1] <= rs2 @[Single_cycle.scala 72:20]
    rf.io.waddr <= rd @[Single_cycle.scala 73:17]
    rf.io.wen <= ct.io.RegWEn @[Single_cycle.scala 74:15]
    node _T_5 = eq(ct.io.WBSel, UInt<1>("h0")) @[Single_cycle.scala 76:22]
    when _T_5 : @[Single_cycle.scala 76:30]
      rf.io.wdata <= io.rdata @[Single_cycle.scala 76:43]
    else :
      node _T_6 = eq(ct.io.WBSel, UInt<1>("h1")) @[Single_cycle.scala 77:27]
      when _T_6 : @[Single_cycle.scala 77:35]
        rf.io.wdata <= alu.io.out @[Single_cycle.scala 77:48]
      else :
        node _T_7 = eq(ct.io.WBSel, UInt<2>("h2")) @[Single_cycle.scala 78:27]
        when _T_7 : @[Single_cycle.scala 78:35]
          node _T_8 = add(pc.io.pc, UInt<3>("h4")) @[Single_cycle.scala 78:60]
          node _T_9 = tail(_T_8, 1) @[Single_cycle.scala 78:60]
          rf.io.wdata <= _T_9 @[Single_cycle.scala 78:48]
        else :
          rf.io.wdata <= UInt<1>("h0") @[Single_cycle.scala 79:28]
    wire rdata_or_zero : UInt<32> @[Single_cycle.scala 83:29]
    node _T_10 = mux(ct.io.Lui, UInt<32>("h0"), rf.io.rdata[0]) @[Single_cycle.scala 84:25]
    rdata_or_zero <= _T_10 @[Single_cycle.scala 84:19]
    node _T_11 = mux(ct.io.ASel, pc.io.pc, rdata_or_zero) @[Single_cycle.scala 85:23]
    alu.io.src1 <= _T_11 @[Single_cycle.scala 85:17]
    node _T_12 = mux(ct.io.BSel, ig.io.imm, rf.io.rdata[1]) @[Single_cycle.scala 86:23]
    alu.io.src2 <= _T_12 @[Single_cycle.scala 86:17]
    alu.io.ALUSel <= ct.io.ALUSel @[Single_cycle.scala 87:19]
    io.funct3 <= funct3 @[Single_cycle.scala 91:15]
    node _T_13 = bits(alu.io.out, 15, 0) @[Single_cycle.scala 92:27]
    io.raddr <= _T_13 @[Single_cycle.scala 92:14]
    io.MemRW <= ct.io.MemRW @[Single_cycle.scala 93:14]
    node _T_14 = bits(alu.io.out, 15, 0) @[Single_cycle.scala 94:27]
    io.waddr <= _T_14 @[Single_cycle.scala 94:14]
    io.wdata <= rf.io.rdata[1] @[Single_cycle.scala 95:14]
    bc.io.BrUn <= ct.io.BrUn @[Single_cycle.scala 98:16]
    bc.io.src1 <= rf.io.rdata[0] @[Single_cycle.scala 99:16]
    bc.io.src2 <= rf.io.rdata[1] @[Single_cycle.scala 100:16]
    ct.io.Inst <= io.rinst @[Single_cycle.scala 103:16]
    ct.io.BrEq <= bc.io.BrEq @[Single_cycle.scala 104:16]
    ct.io.BrLT <= bc.io.BrLT @[Single_cycle.scala 105:16]
    io.regs[0] <= rf.io.regs[0] @[Single_cycle.scala 108:13]
    io.regs[1] <= rf.io.regs[1] @[Single_cycle.scala 108:13]
    io.regs[2] <= rf.io.regs[2] @[Single_cycle.scala 108:13]
    io.regs[3] <= rf.io.regs[3] @[Single_cycle.scala 108:13]
    io.regs[4] <= rf.io.regs[4] @[Single_cycle.scala 108:13]
    io.regs[5] <= rf.io.regs[5] @[Single_cycle.scala 108:13]
    io.regs[6] <= rf.io.regs[6] @[Single_cycle.scala 108:13]
    io.regs[7] <= rf.io.regs[7] @[Single_cycle.scala 108:13]
    io.regs[8] <= rf.io.regs[8] @[Single_cycle.scala 108:13]
    io.regs[9] <= rf.io.regs[9] @[Single_cycle.scala 108:13]
    io.regs[10] <= rf.io.regs[10] @[Single_cycle.scala 108:13]
    io.regs[11] <= rf.io.regs[11] @[Single_cycle.scala 108:13]
    io.regs[12] <= rf.io.regs[12] @[Single_cycle.scala 108:13]
    io.regs[13] <= rf.io.regs[13] @[Single_cycle.scala 108:13]
    io.regs[14] <= rf.io.regs[14] @[Single_cycle.scala 108:13]
    io.regs[15] <= rf.io.regs[15] @[Single_cycle.scala 108:13]
    io.regs[16] <= rf.io.regs[16] @[Single_cycle.scala 108:13]
    io.regs[17] <= rf.io.regs[17] @[Single_cycle.scala 108:13]
    io.regs[18] <= rf.io.regs[18] @[Single_cycle.scala 108:13]
    io.regs[19] <= rf.io.regs[19] @[Single_cycle.scala 108:13]
    io.regs[20] <= rf.io.regs[20] @[Single_cycle.scala 108:13]
    io.regs[21] <= rf.io.regs[21] @[Single_cycle.scala 108:13]
    io.regs[22] <= rf.io.regs[22] @[Single_cycle.scala 108:13]
    io.regs[23] <= rf.io.regs[23] @[Single_cycle.scala 108:13]
    io.regs[24] <= rf.io.regs[24] @[Single_cycle.scala 108:13]
    io.regs[25] <= rf.io.regs[25] @[Single_cycle.scala 108:13]
    io.regs[26] <= rf.io.regs[26] @[Single_cycle.scala 108:13]
    io.regs[27] <= rf.io.regs[27] @[Single_cycle.scala 108:13]
    io.regs[28] <= rf.io.regs[28] @[Single_cycle.scala 108:13]
    io.regs[29] <= rf.io.regs[29] @[Single_cycle.scala 108:13]
    io.regs[30] <= rf.io.regs[30] @[Single_cycle.scala 108:13]
    io.regs[31] <= rf.io.regs[31] @[Single_cycle.scala 108:13]
    io.Hcf <= ct.io.Hcf @[Single_cycle.scala 109:12]
    inst vrf of Vector_RegFile @[Single_cycle.scala 120:21]
    vrf.clock <= clock
    vrf.reset <= reset
    inst valu of Vector_ALU @[Single_cycle.scala 121:22]
    valu.clock <= clock
    valu.reset <= reset
    wire vd : UInt<5> @[Single_cycle.scala 124:22]
    wire vs1 : UInt<5> @[Single_cycle.scala 125:22]
    wire vs2 : UInt<5> @[Single_cycle.scala 126:22]
    wire funct6 : UInt<6> @[Single_cycle.scala 127:22]
    node _T_15 = bits(io.rinst, 11, 7) @[Single_cycle.scala 129:20]
    vd <= _T_15 @[Single_cycle.scala 129:9]
    node _T_16 = bits(io.rinst, 19, 15) @[Single_cycle.scala 130:20]
    vs1 <= _T_16 @[Single_cycle.scala 130:9]
    node _T_17 = bits(io.rinst, 24, 20) @[Single_cycle.scala 131:20]
    vs2 <= _T_17 @[Single_cycle.scala 131:9]
    node _T_18 = bits(io.rinst, 31, 26) @[Single_cycle.scala 132:23]
    funct6 <= _T_18 @[Single_cycle.scala 132:12]
    vrf.io.vector_raddr[0] <= vs1 @[Single_cycle.scala 135:28]
    vrf.io.vector_raddr[1] <= vs2 @[Single_cycle.scala 136:28]
    vrf.io.vector_raddr[2] <= vd @[Single_cycle.scala 137:28]
    vrf.io.vector_waddr <= vd @[Single_cycle.scala 138:25]
    vrf.io.vector_wen <= ct.io.vector_RegWEn @[Single_cycle.scala 139:23]
    io.vwdata <= vrf.io.vector_rdata[2] @[Single_cycle.scala 141:14]
    vrf.io.vector_wdata <= io.vrdata @[Single_cycle.scala 143:25]
    node _T_19 = eq(ct.io.vector_WBSel, UInt<1>("h0")) @[Single_cycle.scala 145:29]
    when _T_19 : @[Single_cycle.scala 145:37]
      vrf.io.vector_wdata <= valu.io.vector_out @[Single_cycle.scala 145:58]
    else :
      node _T_20 = eq(ct.io.vector_WBSel, UInt<1>("h1")) @[Single_cycle.scala 146:34]
      when _T_20 : @[Single_cycle.scala 146:42]
        vrf.io.vector_wdata <= io.vrdata @[Single_cycle.scala 146:63]
    node _T_21 = mux(ct.io.vector_ASel, vrf.io.vector_rdata[0], rf.io.rdata[0]) @[Single_cycle.scala 149:31]
    valu.io.vector_src1 <= _T_21 @[Single_cycle.scala 149:25]
    node _T_22 = mux(ct.io.vector_BSel, vrf.io.vector_rdata[1], rf.io.rdata[1]) @[Single_cycle.scala 150:31]
    valu.io.vector_src2 <= _T_22 @[Single_cycle.scala 150:25]
    valu.io.vector_ALUSel <= ct.io.vector_ALUSel @[Single_cycle.scala 151:27]
    io.vector_regs[0] <= vrf.io.vector_regs[0] @[Single_cycle.scala 155:20]
    io.vector_regs[1] <= vrf.io.vector_regs[1] @[Single_cycle.scala 155:20]
    io.vector_regs[2] <= vrf.io.vector_regs[2] @[Single_cycle.scala 155:20]
    io.vector_regs[3] <= vrf.io.vector_regs[3] @[Single_cycle.scala 155:20]
    io.vector_regs[4] <= vrf.io.vector_regs[4] @[Single_cycle.scala 155:20]
    io.vector_regs[5] <= vrf.io.vector_regs[5] @[Single_cycle.scala 155:20]
    io.vector_regs[6] <= vrf.io.vector_regs[6] @[Single_cycle.scala 155:20]
    io.vector_regs[7] <= vrf.io.vector_regs[7] @[Single_cycle.scala 155:20]
    io.vector_regs[8] <= vrf.io.vector_regs[8] @[Single_cycle.scala 155:20]
    io.vector_regs[9] <= vrf.io.vector_regs[9] @[Single_cycle.scala 155:20]
    io.vector_regs[10] <= vrf.io.vector_regs[10] @[Single_cycle.scala 155:20]
    io.vector_regs[11] <= vrf.io.vector_regs[11] @[Single_cycle.scala 155:20]
    io.vector_regs[12] <= vrf.io.vector_regs[12] @[Single_cycle.scala 155:20]
    io.vector_regs[13] <= vrf.io.vector_regs[13] @[Single_cycle.scala 155:20]
    io.vector_regs[14] <= vrf.io.vector_regs[14] @[Single_cycle.scala 155:20]
    io.vector_regs[15] <= vrf.io.vector_regs[15] @[Single_cycle.scala 155:20]
    io.vector_regs[16] <= vrf.io.vector_regs[16] @[Single_cycle.scala 155:20]
    io.vector_regs[17] <= vrf.io.vector_regs[17] @[Single_cycle.scala 155:20]
    io.vector_regs[18] <= vrf.io.vector_regs[18] @[Single_cycle.scala 155:20]
    io.vector_regs[19] <= vrf.io.vector_regs[19] @[Single_cycle.scala 155:20]
    io.vector_regs[20] <= vrf.io.vector_regs[20] @[Single_cycle.scala 155:20]
    io.vector_regs[21] <= vrf.io.vector_regs[21] @[Single_cycle.scala 155:20]
    io.vector_regs[22] <= vrf.io.vector_regs[22] @[Single_cycle.scala 155:20]
    io.vector_regs[23] <= vrf.io.vector_regs[23] @[Single_cycle.scala 155:20]
    io.vector_regs[24] <= vrf.io.vector_regs[24] @[Single_cycle.scala 155:20]
    io.vector_regs[25] <= vrf.io.vector_regs[25] @[Single_cycle.scala 155:20]
    io.vector_regs[26] <= vrf.io.vector_regs[26] @[Single_cycle.scala 155:20]
    io.vector_regs[27] <= vrf.io.vector_regs[27] @[Single_cycle.scala 155:20]
    io.vector_regs[28] <= vrf.io.vector_regs[28] @[Single_cycle.scala 155:20]
    io.vector_regs[29] <= vrf.io.vector_regs[29] @[Single_cycle.scala 155:20]
    io.vector_regs[30] <= vrf.io.vector_regs[30] @[Single_cycle.scala 155:20]
    io.vector_regs[31] <= vrf.io.vector_regs[31] @[Single_cycle.scala 155:20]

  module InstMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<15>, inst : UInt<32>}

    cmem memory : UInt<8> [32768] @[InstMem.scala 14:19]
    wire rdata : UInt<32> @[InstMem.scala 17:19]
    node _T = add(io.raddr, UInt<2>("h3")) @[InstMem.scala 18:32]
    node _T_1 = tail(_T, 1) @[InstMem.scala 18:32]
    infer mport MPORT = memory[_T_1], clock @[InstMem.scala 18:22]
    node _T_2 = add(io.raddr, UInt<2>("h2")) @[InstMem.scala 19:31]
    node _T_3 = tail(_T_2, 1) @[InstMem.scala 19:31]
    infer mport MPORT_1 = memory[_T_3], clock @[InstMem.scala 19:21]
    node _T_4 = add(io.raddr, UInt<1>("h1")) @[InstMem.scala 20:31]
    node _T_5 = tail(_T_4, 1) @[InstMem.scala 20:31]
    infer mport MPORT_2 = memory[_T_5], clock @[InstMem.scala 20:21]
    node _T_6 = add(io.raddr, UInt<1>("h0")) @[InstMem.scala 21:31]
    node _T_7 = tail(_T_6, 1) @[InstMem.scala 21:31]
    infer mport MPORT_3 = memory[_T_7], clock @[InstMem.scala 21:21]
    node lo = cat(MPORT_2, MPORT_3) @[Cat.scala 30:58]
    node hi = cat(MPORT, MPORT_1) @[Cat.scala 30:58]
    node _T_8 = cat(hi, lo) @[Cat.scala 30:58]
    rdata <= _T_8 @[InstMem.scala 18:9]
    io.inst <= rdata @[InstMem.scala 23:11]

  module DataMem :
    input clock : Clock
    input reset : Reset
    output io : { flip funct3 : UInt<32>, flip raddr : UInt<15>, rdata : UInt<32>, flip wen : UInt<3>, flip waddr : UInt<15>, flip wdata : UInt<32>, vrdata : UInt<64>, flip vwdata : UInt<64>}

    cmem memory : UInt<8> [32768] @[DataMem.scala 33:19]
    wire srdata : SInt<32> @[DataMem.scala 36:20]
    node _T = asUInt(srdata) @[DataMem.scala 38:22]
    io.rdata <= _T @[DataMem.scala 38:12]
    io.vrdata <= UInt<1>("h0") @[DataMem.scala 39:12]
    wire wa : UInt<15>
    wa <= UInt<15>("h0")
    wire wd : UInt<32>
    wd <= UInt<32>("h0")
    node _T_1 = not(UInt<15>("h1")) @[DataMem.scala 46:25]
    node _T_2 = and(io.waddr, _T_1) @[DataMem.scala 46:23]
    node _T_3 = not(UInt<15>("h3")) @[DataMem.scala 47:25]
    node _T_4 = and(io.waddr, _T_3) @[DataMem.scala 47:23]
    node _T_5 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
    node _T_6 = mux(_T_5, io.waddr, UInt<15>("h0")) @[Mux.scala 80:57]
    node _T_7 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
    node _T_8 = mux(_T_7, _T_2, _T_6) @[Mux.scala 80:57]
    node _T_9 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
    node _T_10 = mux(_T_9, _T_4, _T_8) @[Mux.scala 80:57]
    wa <= _T_10 @[DataMem.scala 44:6]
    node _T_11 = bits(io.wdata, 7, 0) @[DataMem.scala 51:21]
    node _T_12 = bits(io.wdata, 15, 0) @[DataMem.scala 52:21]
    node _T_13 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
    node _T_14 = mux(_T_13, _T_11, UInt<1>("h0")) @[Mux.scala 80:57]
    node _T_15 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
    node _T_16 = mux(_T_15, _T_12, _T_14) @[Mux.scala 80:57]
    node _T_17 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
    node _T_18 = mux(_T_17, io.wdata, _T_16) @[Mux.scala 80:57]
    wd <= _T_18 @[DataMem.scala 50:6]
    srdata <= asSInt(UInt<1>("h0")) @[DataMem.scala 56:10]
    node _T_19 = eq(io.wen, UInt<1>("h0")) @[DataMem.scala 58:15]
    when _T_19 : @[DataMem.scala 58:23]
      node _T_20 = eq(io.funct3, UInt<1>("h0")) @[DataMem.scala 59:19]
      when _T_20 : @[DataMem.scala 59:27]
        infer mport MPORT = memory[wa], clock @[DataMem.scala 60:13]
        node _T_21 = bits(wd, 7, 0) @[DataMem.scala 60:23]
        MPORT <= _T_21 @[DataMem.scala 60:18]
      else :
        node _T_22 = eq(io.funct3, UInt<1>("h1")) @[DataMem.scala 61:25]
        when _T_22 : @[DataMem.scala 61:33]
          infer mport MPORT_1 = memory[wa], clock @[DataMem.scala 62:13]
          node _T_23 = bits(wd, 7, 0) @[DataMem.scala 62:23]
          MPORT_1 <= _T_23 @[DataMem.scala 62:18]
          node _T_24 = add(wa, UInt<15>("h1")) @[DataMem.scala 63:16]
          node _T_25 = tail(_T_24, 1) @[DataMem.scala 63:16]
          infer mport MPORT_2 = memory[_T_25], clock @[DataMem.scala 63:13]
          node _T_26 = bits(wd, 15, 8) @[DataMem.scala 63:35]
          MPORT_2 <= _T_26 @[DataMem.scala 63:30]
        else :
          node _T_27 = eq(io.funct3, UInt<2>("h2")) @[DataMem.scala 64:25]
          when _T_27 : @[DataMem.scala 64:33]
            infer mport MPORT_3 = memory[wa], clock @[DataMem.scala 65:13]
            node _T_28 = bits(wd, 7, 0) @[DataMem.scala 65:23]
            MPORT_3 <= _T_28 @[DataMem.scala 65:18]
            node _T_29 = add(wa, UInt<15>("h1")) @[DataMem.scala 66:16]
            node _T_30 = tail(_T_29, 1) @[DataMem.scala 66:16]
            infer mport MPORT_4 = memory[_T_30], clock @[DataMem.scala 66:13]
            node _T_31 = bits(wd, 15, 8) @[DataMem.scala 66:35]
            MPORT_4 <= _T_31 @[DataMem.scala 66:30]
            node _T_32 = add(wa, UInt<15>("h2")) @[DataMem.scala 67:16]
            node _T_33 = tail(_T_32, 1) @[DataMem.scala 67:16]
            infer mport MPORT_5 = memory[_T_33], clock @[DataMem.scala 67:13]
            node _T_34 = bits(wd, 23, 16) @[DataMem.scala 67:35]
            MPORT_5 <= _T_34 @[DataMem.scala 67:30]
            node _T_35 = add(wa, UInt<15>("h3")) @[DataMem.scala 68:16]
            node _T_36 = tail(_T_35, 1) @[DataMem.scala 68:16]
            infer mport MPORT_6 = memory[_T_36], clock @[DataMem.scala 68:13]
            node _T_37 = bits(wd, 31, 24) @[DataMem.scala 68:35]
            MPORT_6 <= _T_37 @[DataMem.scala 68:30]
    else :
      node _T_38 = eq(io.wen, UInt<1>("h1")) @[DataMem.scala 70:21]
      when _T_38 : @[DataMem.scala 70:29]
        infer mport MPORT_7 = memory[io.raddr], clock @[DataMem.scala 72:21]
        node _T_39 = asSInt(MPORT_7) @[DataMem.scala 72:32]
        node _T_40 = not(UInt<15>("h1")) @[DataMem.scala 73:39]
        node _T_41 = and(io.raddr, _T_40) @[DataMem.scala 73:36]
        node _T_42 = add(_T_41, UInt<1>("h1")) @[DataMem.scala 73:56]
        node _T_43 = tail(_T_42, 1) @[DataMem.scala 73:56]
        infer mport MPORT_8 = memory[_T_43], clock @[DataMem.scala 73:25]
        node _T_44 = not(UInt<15>("h1")) @[DataMem.scala 74:38]
        node _T_45 = and(io.raddr, _T_44) @[DataMem.scala 74:35]
        infer mport MPORT_9 = memory[_T_45], clock @[DataMem.scala 74:25]
        node _T_46 = cat(MPORT_8, MPORT_9) @[Cat.scala 30:58]
        node _T_47 = asSInt(_T_46) @[DataMem.scala 74:56]
        node _T_48 = not(UInt<15>("h3")) @[DataMem.scala 75:38]
        node _T_49 = and(io.raddr, _T_48) @[DataMem.scala 75:36]
        node _T_50 = add(_T_49, UInt<2>("h3")) @[DataMem.scala 75:54]
        node _T_51 = tail(_T_50, 1) @[DataMem.scala 75:54]
        infer mport MPORT_10 = memory[_T_51], clock @[DataMem.scala 75:25]
        node _T_52 = not(UInt<15>("h3")) @[DataMem.scala 76:38]
        node _T_53 = and(io.raddr, _T_52) @[DataMem.scala 76:36]
        node _T_54 = add(_T_53, UInt<2>("h2")) @[DataMem.scala 76:54]
        node _T_55 = tail(_T_54, 1) @[DataMem.scala 76:54]
        infer mport MPORT_11 = memory[_T_55], clock @[DataMem.scala 76:25]
        node _T_56 = not(UInt<15>("h3")) @[DataMem.scala 77:38]
        node _T_57 = and(io.raddr, _T_56) @[DataMem.scala 77:36]
        node _T_58 = add(_T_57, UInt<1>("h1")) @[DataMem.scala 77:54]
        node _T_59 = tail(_T_58, 1) @[DataMem.scala 77:54]
        infer mport MPORT_12 = memory[_T_59], clock @[DataMem.scala 77:25]
        node _T_60 = not(UInt<15>("h3")) @[DataMem.scala 78:37]
        node _T_61 = and(io.raddr, _T_60) @[DataMem.scala 78:35]
        infer mport MPORT_13 = memory[_T_61], clock @[DataMem.scala 78:25]
        node lo = cat(MPORT_12, MPORT_13) @[Cat.scala 30:58]
        node hi = cat(MPORT_10, MPORT_11) @[Cat.scala 30:58]
        node _T_62 = cat(hi, lo) @[Cat.scala 30:58]
        node _T_63 = asSInt(_T_62) @[DataMem.scala 78:54]
        infer mport MPORT_14 = memory[io.raddr], clock @[DataMem.scala 79:36]
        node _T_64 = cat(UInt<24>("h0"), MPORT_14) @[Cat.scala 30:58]
        node _T_65 = asSInt(_T_64) @[DataMem.scala 79:48]
        node _T_66 = not(UInt<15>("h1")) @[DataMem.scala 81:38]
        node _T_67 = and(io.raddr, _T_66) @[DataMem.scala 81:36]
        node _T_68 = add(_T_67, UInt<1>("h1")) @[DataMem.scala 81:54]
        node _T_69 = tail(_T_68, 1) @[DataMem.scala 81:54]
        infer mport MPORT_15 = memory[_T_69], clock @[DataMem.scala 81:25]
        node _T_70 = not(UInt<15>("h1")) @[DataMem.scala 82:37]
        node _T_71 = and(io.raddr, _T_70) @[DataMem.scala 82:35]
        infer mport MPORT_16 = memory[_T_71], clock @[DataMem.scala 82:25]
        node hi_1 = cat(UInt<16>("h0"), MPORT_15) @[Cat.scala 30:58]
        node _T_72 = cat(hi_1, MPORT_16) @[Cat.scala 30:58]
        node _T_73 = asSInt(_T_72) @[DataMem.scala 82:54]
        node _T_74 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 80:60]
        node _T_75 = mux(_T_74, _T_39, asSInt(UInt<1>("h0"))) @[Mux.scala 80:57]
        node _T_76 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 80:60]
        node _T_77 = mux(_T_76, _T_47, _T_75) @[Mux.scala 80:57]
        node _T_78 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 80:60]
        node _T_79 = mux(_T_78, _T_63, _T_77) @[Mux.scala 80:57]
        node _T_80 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 80:60]
        node _T_81 = mux(_T_80, _T_65, _T_79) @[Mux.scala 80:57]
        node _T_82 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 80:60]
        node _T_83 = mux(_T_82, _T_73, _T_81) @[Mux.scala 80:57]
        srdata <= _T_83 @[DataMem.scala 71:12]
      else :
        node _T_84 = eq(io.wen, UInt<2>("h2")) @[DataMem.scala 84:21]
        when _T_84 : @[DataMem.scala 84:29]
          node _T_85 = add(wa, UInt<1>("h0")) @[DataMem.scala 86:16]
          node _T_86 = tail(_T_85, 1) @[DataMem.scala 86:16]
          infer mport MPORT_17 = memory[_T_86], clock @[DataMem.scala 86:13]
          node _T_87 = bits(io.vwdata, 7, 0) @[DataMem.scala 86:39]
          MPORT_17 <= _T_87 @[DataMem.scala 86:27]
          node _T_88 = add(wa, UInt<1>("h1")) @[DataMem.scala 86:16]
          node _T_89 = tail(_T_88, 1) @[DataMem.scala 86:16]
          infer mport MPORT_18 = memory[_T_89], clock @[DataMem.scala 86:13]
          node _T_90 = bits(io.vwdata, 15, 8) @[DataMem.scala 86:39]
          MPORT_18 <= _T_90 @[DataMem.scala 86:27]
          node _T_91 = add(wa, UInt<2>("h2")) @[DataMem.scala 86:16]
          node _T_92 = tail(_T_91, 1) @[DataMem.scala 86:16]
          infer mport MPORT_19 = memory[_T_92], clock @[DataMem.scala 86:13]
          node _T_93 = bits(io.vwdata, 23, 16) @[DataMem.scala 86:39]
          MPORT_19 <= _T_93 @[DataMem.scala 86:27]
          node _T_94 = add(wa, UInt<2>("h3")) @[DataMem.scala 86:16]
          node _T_95 = tail(_T_94, 1) @[DataMem.scala 86:16]
          infer mport MPORT_20 = memory[_T_95], clock @[DataMem.scala 86:13]
          node _T_96 = bits(io.vwdata, 31, 24) @[DataMem.scala 86:39]
          MPORT_20 <= _T_96 @[DataMem.scala 86:27]
          node _T_97 = add(wa, UInt<3>("h4")) @[DataMem.scala 86:16]
          node _T_98 = tail(_T_97, 1) @[DataMem.scala 86:16]
          infer mport MPORT_21 = memory[_T_98], clock @[DataMem.scala 86:13]
          node _T_99 = bits(io.vwdata, 39, 32) @[DataMem.scala 86:39]
          MPORT_21 <= _T_99 @[DataMem.scala 86:27]
          node _T_100 = add(wa, UInt<3>("h5")) @[DataMem.scala 86:16]
          node _T_101 = tail(_T_100, 1) @[DataMem.scala 86:16]
          infer mport MPORT_22 = memory[_T_101], clock @[DataMem.scala 86:13]
          node _T_102 = bits(io.vwdata, 47, 40) @[DataMem.scala 86:39]
          MPORT_22 <= _T_102 @[DataMem.scala 86:27]
          node _T_103 = add(wa, UInt<3>("h6")) @[DataMem.scala 86:16]
          node _T_104 = tail(_T_103, 1) @[DataMem.scala 86:16]
          infer mport MPORT_23 = memory[_T_104], clock @[DataMem.scala 86:13]
          node _T_105 = bits(io.vwdata, 55, 48) @[DataMem.scala 86:39]
          MPORT_23 <= _T_105 @[DataMem.scala 86:27]
          node _T_106 = add(wa, UInt<3>("h7")) @[DataMem.scala 86:16]
          node _T_107 = tail(_T_106, 1) @[DataMem.scala 86:16]
          infer mport MPORT_24 = memory[_T_107], clock @[DataMem.scala 86:13]
          node _T_108 = bits(io.vwdata, 63, 56) @[DataMem.scala 86:39]
          MPORT_24 <= _T_108 @[DataMem.scala 86:27]
        else :
          node _T_109 = eq(io.wen, UInt<2>("h3")) @[DataMem.scala 88:21]
          when _T_109 : @[DataMem.scala 88:29]
            wire _WIRE : UInt<8>[8] @[DataMem.scala 89:30]
            _WIRE[0] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[1] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[2] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[3] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[4] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[5] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[6] <= UInt<8>("h0") @[DataMem.scala 89:30]
            _WIRE[7] <= UInt<8>("h0") @[DataMem.scala 89:30]
            node _T_110 = add(io.raddr, UInt<1>("h0")) @[DataMem.scala 91:41]
            node _T_111 = tail(_T_110, 1) @[DataMem.scala 91:41]
            infer mport MPORT_25 = memory[_T_111], clock @[DataMem.scala 91:31]
            _WIRE[0] <= MPORT_25 @[DataMem.scala 91:22]
            node _T_112 = add(io.raddr, UInt<1>("h1")) @[DataMem.scala 91:41]
            node _T_113 = tail(_T_112, 1) @[DataMem.scala 91:41]
            infer mport MPORT_26 = memory[_T_113], clock @[DataMem.scala 91:31]
            _WIRE[1] <= MPORT_26 @[DataMem.scala 91:22]
            node _T_114 = add(io.raddr, UInt<2>("h2")) @[DataMem.scala 91:41]
            node _T_115 = tail(_T_114, 1) @[DataMem.scala 91:41]
            infer mport MPORT_27 = memory[_T_115], clock @[DataMem.scala 91:31]
            _WIRE[2] <= MPORT_27 @[DataMem.scala 91:22]
            node _T_116 = add(io.raddr, UInt<2>("h3")) @[DataMem.scala 91:41]
            node _T_117 = tail(_T_116, 1) @[DataMem.scala 91:41]
            infer mport MPORT_28 = memory[_T_117], clock @[DataMem.scala 91:31]
            _WIRE[3] <= MPORT_28 @[DataMem.scala 91:22]
            node _T_118 = add(io.raddr, UInt<3>("h4")) @[DataMem.scala 91:41]
            node _T_119 = tail(_T_118, 1) @[DataMem.scala 91:41]
            infer mport MPORT_29 = memory[_T_119], clock @[DataMem.scala 91:31]
            _WIRE[4] <= MPORT_29 @[DataMem.scala 91:22]
            node _T_120 = add(io.raddr, UInt<3>("h5")) @[DataMem.scala 91:41]
            node _T_121 = tail(_T_120, 1) @[DataMem.scala 91:41]
            infer mport MPORT_30 = memory[_T_121], clock @[DataMem.scala 91:31]
            _WIRE[5] <= MPORT_30 @[DataMem.scala 91:22]
            node _T_122 = add(io.raddr, UInt<3>("h6")) @[DataMem.scala 91:41]
            node _T_123 = tail(_T_122, 1) @[DataMem.scala 91:41]
            infer mport MPORT_31 = memory[_T_123], clock @[DataMem.scala 91:31]
            _WIRE[6] <= MPORT_31 @[DataMem.scala 91:22]
            node _T_124 = add(io.raddr, UInt<3>("h7")) @[DataMem.scala 91:41]
            node _T_125 = tail(_T_124, 1) @[DataMem.scala 91:41]
            infer mport MPORT_32 = memory[_T_125], clock @[DataMem.scala 91:31]
            _WIRE[7] <= MPORT_32 @[DataMem.scala 91:22]
            node lo_lo = cat(_WIRE[1], _WIRE[0]) @[DataMem.scala 93:30]
            node lo_hi = cat(_WIRE[3], _WIRE[2]) @[DataMem.scala 93:30]
            node lo_1 = cat(lo_hi, lo_lo) @[DataMem.scala 93:30]
            node hi_lo = cat(_WIRE[5], _WIRE[4]) @[DataMem.scala 93:30]
            node hi_hi = cat(_WIRE[7], _WIRE[6]) @[DataMem.scala 93:30]
            node hi_2 = cat(hi_hi, hi_lo) @[DataMem.scala 93:30]
            node _T_126 = cat(hi_2, lo_1) @[DataMem.scala 93:30]
            io.vrdata <= _T_126 @[DataMem.scala 93:15]

  module top :
    input clock : Clock
    input reset : UInt<1>
    output io : { pc : UInt<15>, regs : UInt<32>[32], Hcf : UInt<1>, inst : UInt<32>, rdata : UInt<32>, vector_regs : UInt<64>[32], vrdata : UInt<64>}

    inst sc of Single_Cycle @[top.scala 30:20]
    sc.clock <= clock
    sc.reset <= reset
    inst im of InstMem @[top.scala 31:20]
    im.clock <= clock
    im.reset <= reset
    inst dm of DataMem @[top.scala 32:20]
    dm.clock <= clock
    dm.reset <= reset
    sc.io.rinst <= im.io.inst @[top.scala 35:17]
    sc.io.rdata <= dm.io.rdata @[top.scala 36:17]
    sc.io.vrdata <= dm.io.vrdata @[top.scala 37:18]
    im.io.raddr <= sc.io.pc @[top.scala 40:17]
    dm.io.funct3 <= sc.io.funct3 @[top.scala 43:18]
    dm.io.raddr <= sc.io.raddr @[top.scala 44:17]
    dm.io.wen <= sc.io.MemRW @[top.scala 45:15]
    dm.io.waddr <= sc.io.waddr @[top.scala 46:17]
    dm.io.wdata <= sc.io.wdata @[top.scala 47:17]
    dm.io.vwdata <= sc.io.vwdata @[top.scala 48:18]
    io.pc <= sc.io.pc @[top.scala 51:11]
    io.regs[0] <= sc.io.regs[0] @[top.scala 52:13]
    io.regs[1] <= sc.io.regs[1] @[top.scala 52:13]
    io.regs[2] <= sc.io.regs[2] @[top.scala 52:13]
    io.regs[3] <= sc.io.regs[3] @[top.scala 52:13]
    io.regs[4] <= sc.io.regs[4] @[top.scala 52:13]
    io.regs[5] <= sc.io.regs[5] @[top.scala 52:13]
    io.regs[6] <= sc.io.regs[6] @[top.scala 52:13]
    io.regs[7] <= sc.io.regs[7] @[top.scala 52:13]
    io.regs[8] <= sc.io.regs[8] @[top.scala 52:13]
    io.regs[9] <= sc.io.regs[9] @[top.scala 52:13]
    io.regs[10] <= sc.io.regs[10] @[top.scala 52:13]
    io.regs[11] <= sc.io.regs[11] @[top.scala 52:13]
    io.regs[12] <= sc.io.regs[12] @[top.scala 52:13]
    io.regs[13] <= sc.io.regs[13] @[top.scala 52:13]
    io.regs[14] <= sc.io.regs[14] @[top.scala 52:13]
    io.regs[15] <= sc.io.regs[15] @[top.scala 52:13]
    io.regs[16] <= sc.io.regs[16] @[top.scala 52:13]
    io.regs[17] <= sc.io.regs[17] @[top.scala 52:13]
    io.regs[18] <= sc.io.regs[18] @[top.scala 52:13]
    io.regs[19] <= sc.io.regs[19] @[top.scala 52:13]
    io.regs[20] <= sc.io.regs[20] @[top.scala 52:13]
    io.regs[21] <= sc.io.regs[21] @[top.scala 52:13]
    io.regs[22] <= sc.io.regs[22] @[top.scala 52:13]
    io.regs[23] <= sc.io.regs[23] @[top.scala 52:13]
    io.regs[24] <= sc.io.regs[24] @[top.scala 52:13]
    io.regs[25] <= sc.io.regs[25] @[top.scala 52:13]
    io.regs[26] <= sc.io.regs[26] @[top.scala 52:13]
    io.regs[27] <= sc.io.regs[27] @[top.scala 52:13]
    io.regs[28] <= sc.io.regs[28] @[top.scala 52:13]
    io.regs[29] <= sc.io.regs[29] @[top.scala 52:13]
    io.regs[30] <= sc.io.regs[30] @[top.scala 52:13]
    io.regs[31] <= sc.io.regs[31] @[top.scala 52:13]
    io.Hcf <= sc.io.Hcf @[top.scala 53:12]
    io.inst <= im.io.inst @[top.scala 54:13]
    io.rdata <= dm.io.rdata @[top.scala 55:14]
    io.vrdata <= dm.io.vrdata @[top.scala 56:14]
    io.vector_regs[0] <= sc.io.vector_regs[0] @[top.scala 65:20]
    io.vector_regs[1] <= sc.io.vector_regs[1] @[top.scala 65:20]
    io.vector_regs[2] <= sc.io.vector_regs[2] @[top.scala 65:20]
    io.vector_regs[3] <= sc.io.vector_regs[3] @[top.scala 65:20]
    io.vector_regs[4] <= sc.io.vector_regs[4] @[top.scala 65:20]
    io.vector_regs[5] <= sc.io.vector_regs[5] @[top.scala 65:20]
    io.vector_regs[6] <= sc.io.vector_regs[6] @[top.scala 65:20]
    io.vector_regs[7] <= sc.io.vector_regs[7] @[top.scala 65:20]
    io.vector_regs[8] <= sc.io.vector_regs[8] @[top.scala 65:20]
    io.vector_regs[9] <= sc.io.vector_regs[9] @[top.scala 65:20]
    io.vector_regs[10] <= sc.io.vector_regs[10] @[top.scala 65:20]
    io.vector_regs[11] <= sc.io.vector_regs[11] @[top.scala 65:20]
    io.vector_regs[12] <= sc.io.vector_regs[12] @[top.scala 65:20]
    io.vector_regs[13] <= sc.io.vector_regs[13] @[top.scala 65:20]
    io.vector_regs[14] <= sc.io.vector_regs[14] @[top.scala 65:20]
    io.vector_regs[15] <= sc.io.vector_regs[15] @[top.scala 65:20]
    io.vector_regs[16] <= sc.io.vector_regs[16] @[top.scala 65:20]
    io.vector_regs[17] <= sc.io.vector_regs[17] @[top.scala 65:20]
    io.vector_regs[18] <= sc.io.vector_regs[18] @[top.scala 65:20]
    io.vector_regs[19] <= sc.io.vector_regs[19] @[top.scala 65:20]
    io.vector_regs[20] <= sc.io.vector_regs[20] @[top.scala 65:20]
    io.vector_regs[21] <= sc.io.vector_regs[21] @[top.scala 65:20]
    io.vector_regs[22] <= sc.io.vector_regs[22] @[top.scala 65:20]
    io.vector_regs[23] <= sc.io.vector_regs[23] @[top.scala 65:20]
    io.vector_regs[24] <= sc.io.vector_regs[24] @[top.scala 65:20]
    io.vector_regs[25] <= sc.io.vector_regs[25] @[top.scala 65:20]
    io.vector_regs[26] <= sc.io.vector_regs[26] @[top.scala 65:20]
    io.vector_regs[27] <= sc.io.vector_regs[27] @[top.scala 65:20]
    io.vector_regs[28] <= sc.io.vector_regs[28] @[top.scala 65:20]
    io.vector_regs[29] <= sc.io.vector_regs[29] @[top.scala 65:20]
    io.vector_regs[30] <= sc.io.vector_regs[30] @[top.scala 65:20]
    io.vector_regs[31] <= sc.io.vector_regs[31] @[top.scala 65:20]

